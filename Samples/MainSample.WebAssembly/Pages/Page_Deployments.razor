@page "/deployments"
@using System.Globalization


<MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Class="d-flex flex-column h-100 p-4">
    <MudText Typo="Typo.h4" GutterBottom="true">Deployment History | Time Machine</MudText>
    <MudText Typo="Typo.subtitle1" GutterBottom="true">Here you can see and visit older versions to compare features and errors.</MudText>

    <MudDivider Class="mb-4" />

    @if (_deployments is null)
    {
        <MudProgressCircular Indeterminate="true" Color="Color.Primary" Size="Size.Medium" />
    }
    else if (!_deployments.Any())
    {
        <MudText Typo="Typo.body1">No deployments found.</MudText>
    }
    else
    {
        <MudDataGrid T="Deployment"
                     Items="_deployments"
                     Filterable="true"
                     QuickFilter="_quickFilter"
                     Height="70vh"
                     SortMode="SortMode.Multiple"
                     Hover="true"
                     Bordered="true"
                     Virtualize="true"
                     Striped="true"
                     DragDropColumnReordering="true" ApplyDropClassesOnDragStarted="true"
                     DragIndicatorIcon="@Icons.Material.Filled.DragIndicator" ColumnResizeMode="ResizeMode.Column"
                     Class="flex-grow-1">

            <ToolBarContent>
                <MudTextField @bind-Value="_searchString"
                              Placeholder="Search..."
                              Adornment="Adornment.Start"
                              AdornmentIcon="@Icons.Material.Filled.Search"
                              Immediate="true"
                              Class="mr-4 mt-0" />
            </ToolBarContent>

            <Columns>
                <PropertyColumn Property="x => x.CreatedOn">
                    <CellTemplate Context="context">
                        @context.Item.CreatedOn.ToString("dd.MM.yyyy HH:mm")
                            <MudText Typo="Typo.caption" Class="ml-2">(@GetRelativeTime(context.Item.CreatedOn))</MudText>
                    </CellTemplate>
                </PropertyColumn>

                <PropertyColumn Property="context => context.ProjectName" Title="Project" />
                <PropertyColumn Property="context => context.AssemblyVersion" Title="MudEx Version">
                    <CellTemplate Context="context">
                    <MudChip T="Deployment" Color="Color.Primary" Variant="Variant.Outlined">
                        @context.Item.AssemblyVersion
                    </MudChip>
                    </CellTemplate>
                </PropertyColumn>
                <PropertyColumn Property="context => context.MudBlazorVersion" Title="MudBlazor Version">
                    <CellTemplate Context="context">
                        <MudChip T="Deployment" Color="Color.Info" Variant="Variant.Outlined">
                            @context.Item.MudBlazorVersion
                        </MudChip>
                    </CellTemplate>
                </PropertyColumn>
                <PropertyColumn Property="context => context.Environment" Title="Environment" />

                <TemplateColumn Title="Link" Filterable="false" Sortable="false">
                    <CellTemplate Context="context">
                        <MudExIconButton Icon="@Icons.Material.Filled.OpenInNew"
                                         Target="_blank"
                                         Href="@context.Item.Url"
                                       Color="Color.Primary"
                                       Size="Size.Small"
                                       ToolTip="Open deployment URL" />
                    </CellTemplate>
                </TemplateColumn>
            </Columns>

            @* <PagerContent>
                <MudDataGridPager T="Deployment" />
            </PagerContent> *@
        </MudDataGrid>
    }
</MudContainer>

@code {
    private Deployment[]? _deployments;
    private MudDataGrid<Deployment> _dataGrid;
    private string _searchString = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        _deployments = await Deployments.GetSuccessFullDeploymentsAsync();
    }

    private string GetRelativeTime(DateTime dt)
    {
        var span = DateTime.Now - dt;
        if (span.TotalDays >= 1)
            return span.Days == 1 ? "1 day ago" : $"{span.Days} days ago";
        if (span.TotalHours >= 1)
            return span.Hours == 1 ? "1 hour ago" : $"{span.Hours} hours ago";
        if (span.TotalMinutes >= 1)
            return span.Minutes == 1 ? "1 minute ago" : $"{span.Minutes} minutes ago";
        return "just now";
    }

    private bool _quickFilter(Deployment d)
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;
        var term = _searchString.Trim();
        return (d.ProjectName?.Contains(term, StringComparison.OrdinalIgnoreCase) ?? false)
            || (d.CreatedOn.ToString(CultureInfo.InvariantCulture)?.Contains(term, StringComparison.OrdinalIgnoreCase) ?? false)
            || (d.Environment?.Contains(term, StringComparison.OrdinalIgnoreCase) ?? false)
            || (d.AssemblyVersion?.Contains(term, StringComparison.OrdinalIgnoreCase) ?? false)
            || (d.MudBlazorVersion?.Contains(term, StringComparison.OrdinalIgnoreCase) ?? false);
    }

}
