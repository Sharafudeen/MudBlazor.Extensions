@page "/deployments"


<MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Class="d-flex flex-column h-100 p-4">
    <MudText Typo="Typo.h4" GutterBottom="true">Deployment History</MudText>
    <MudText Typo="Typo.subtitle1" GutterBottom="true">Here you can see and browser older versions to compare features and errors.</MudText>

    <MudDivider Class="mb-4" />

    <MudTable Items="_deployments"
              Hover="true"
              Bordered="true"
              Striped="true"
              Virtualize="true"
              Height="75vh"
              Elevation="1">
        <HeaderContent>
            <MudTh>Datum</MudTh>
            <MudTh>Projekt</MudTh>
            <MudTh>Environment</MudTh>
            <MudTh>Status</MudTh>
            <MudTh>Link</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Datum">
                @context.CreatedOn.ToString("dd.MM.yyyy HH:mm")
                <MudText Typo="Typo.caption" Class="ml-2">(@GetRelativeTime(context.CreatedOn))</MudText>
            </MudTd>
            <MudTd DataLabel="Projekt">@context.ProjectName</MudTd>
            <MudTd DataLabel="Environment">@context.Environment</MudTd>
            <MudTd DataLabel="Status">
                <MudChip T="Deployment" Color="@(context.Stages.All(s => s.Status == "success") ? Color.Success : Color.Warning)"
                         Variant="Variant.Filled">
                    @context.Stages.Last().Status
                </MudChip>
            </MudTd>
            <MudTd DataLabel="Link">
                <MudExIconButton Href="@context.Url"
                               Target="_blank"
                               Icon="@Icons.Material.Filled.OpenInNew"
                               Color="Color.Primary"
                               Size="Size.Small"
                               ToolTip="Open deployment URL" />
            </MudTd>
        </RowTemplate>
    </MudTable>
</MudContainer>

@code {
    private Deployment[] _deployments = Array.Empty<Deployment>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            _deployments = await Deployments.GetLatestSuccessFullDeploymentsPerDayAsync();
            
            StateHasChanged();
        }
    }

    private string GetRelativeTime(DateTime dt)
    {
        var span = DateTime.Now - dt;
        if (span.TotalDays >= 1)
            return span.Days == 1 ? "1 day ago" : $"{span.Days} days ago";
        if (span.TotalHours >= 1)
            return span.Hours == 1 ? "1 hour ago" : $"{span.Hours} hours ago";
        if (span.TotalMinutes >= 1)
            return span.Minutes == 1 ? "1 minute ago" : $"{span.Minutes} minutes ago";
        return "just now";
    }
}
