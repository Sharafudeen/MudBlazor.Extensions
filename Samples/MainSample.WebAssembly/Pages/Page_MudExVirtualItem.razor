@page "/virtual-item"
@using MudBlazor.Extensions.Helper
@using MudBlazor.Extensions.Options

@attribute [DemoNew(Name = "MudExVirtualItem", Icon = Icons.Material.Outlined.TabUnselected, Documentation = "Sample mega ", ForComponentType = typeof(MudExVirtualItem))]

<DemoComponent PageType="@GetType()">
    <MudContainer MaxWidth="MaxWidth.Medium">

        <MudCard Elevation="4" Style="position: fixed; top: 54px; z-index: 1; left: 70px; width: 100%">
            <MudText Typo="Typo.h5" Align="Align.Center">
                <p>Scroll down to discover the content (currently the @(_itemIsVisible ? "item is visible" : "item is not visible"))</p>
            </MudText>
        </MudCard>

        <div style="margin-top: 50px; text-align: center;">
            <MudText Typo="Typo.h4" Color="Color.Primary" GutterBottom="true">MudExVirtualItem Demo</MudText>

            <MudText Typo="Typo.body1" GutterBottom="true">
                This demo showcases the <strong>MudExVirtualItem</strong> component, a virtualized container that efficiently renders content
                only when it becomes visible in the viewport.
            </MudText>

            <MudText Typo="Typo.body1" GutterBottom="true">
                In this example, data is loaded dynamically as soon as the item first appears within view. The component supports two content slots:
            </MudText>

            <ul style="text-align: left; display: inline-block;">
                <li><MudText Typo="Typo.body2"><strong>ChildContent</strong> - rendered when the item is visible in the viewport.</MudText></li>
                <li><MudText Typo="Typo.body2"><strong>NotIntersectingContent</strong> - rendered when the item is outside the viewport.</MudText></li>
            </ul>

            <MudText Typo="Typo.body1" GutterBottom="true">
                The component also provides the <strong>IsVisibleChanged</strong> event, which triggers whenever the visibility of the item changes.
            </MudText>

            <MudText Typo="Typo.body1" GutterBottom="true">
                Several customization options are available:
            </MudText>

            <ul style="text-align: left; display: inline-block; margin-bottom: 30px">
                <li><MudText Typo="Typo.subtitle2"><strong>Virtualize</strong> - enables or disables virtualization.</MudText></li>
                <li><MudText Typo="Typo.subtitle2"><strong>IntersectingClass</strong> - applies a CSS class when the item is visible.</MudText></li>
                <li><MudText Typo="Typo.subtitle2"><strong>NotIntersectingClass</strong> - applies a CSS class when the item is not visible.</MudText></li>
                <li><MudText Typo="Typo.subtitle2"><strong>IntersectingStyle</strong> - applies styles when the item is visible.</MudText></li>
                <li><MudText Typo="Typo.subtitle2"><strong>NotIntersectingStyle</strong> - applies styles when the item is not visible.</MudText></li>
            </ul>

            <MudText Typo="Typo.body1" Style="margin-bottom: 30px;">
                These features make <strong>MudExVirtualItem</strong> ideal for optimizing performance when working with large datasets or dynamic content that
                doesn't need to be loaded all at once.
            </MudText>

            <MudText Style="@MudExStyleBuilder.Default.WithAnimation(AnimationType.RubberBand, TimeSpan.FromMilliseconds(1500), iterationCount: AnimationIteration.Infinite).Style" Typo="Typo.h5" Color="Color.Primary" GutterBottom="true">Scroll down to see the behavior</MudText>

        </div>


        <div style="height: 3000px; display: flex; justify-content: center; align-items: center;">
            <MudExVirtualItem>
                <div style="@MudExStyleBuilder.Default.WithAnimation(AnimationType.FadeIn, TimeSpan.FromSeconds(2)).Style">
                    <MudText Typo="Typo.subtitle2" Style="font-style: italic">Keep scrolling to reveal the content below...</MudText>
                </div>
            </MudExVirtualItem>
        </div>

        <div style="height: 1000px;"></div>
        <MudExVirtualItem IsVisibleChanged="IsVisibleChanged">
            <ChildContent>
                <MudCard Style="@ItemStyle()" Elevation="4">
                    <MudCardMedia Image="@_data?.Image" Height="200" />
                    <MudCardContent>
                        <MudText Typo="Typo.h5">@_data?.Title</MudText>
                        <MudText Typo="Typo.body2">@_data?.Description</MudText>
                        <MudText Typo="Typo.body2">@_data?.Content</MudText>
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton Variant="Variant.Text" Color="Color.Primary">Share</MudButton>
                        <MudButton Variant="Variant.Text" Color="Color.Primary">Learn More</MudButton>
                    </MudCardActions>
                </MudCard>
            </ChildContent>
            <NotIntersectingContent>
                <MudCard Style="width: 300px; margin: 0 auto;" Elevation="4">
                    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="200px" />
                    <MudCardContent>
                        <MudSkeleton Width="30%" Height="42px;" />
                        <MudSkeleton Width="80%" />
                        <MudSkeleton Width="100%" />
                    </MudCardContent>
                    <MudCardActions>
                        <MudSkeleton Width="64px" Height="40px" Class="ml-2" />
                        <MudSkeleton Width="105px" Height="40px" Class="ml-3" />
                    </MudCardActions>
                </MudCard>
            </NotIntersectingContent>
        </MudExVirtualItem>

        <div style="height: 1000px;"></div>
        <MudScrollToTop TopOffset="400" Style="margin-bottom: 70px">
            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.ArrowUpward" Color="Color.Primary">Scroll to top</MudButton>
        </MudScrollToTop>
    </MudContainer>
</DemoComponent>


@code {

    public class SampleData
    {
        public string Image { get; set; }
        public string Title { get; set; }
        public string Description { get; set; }
        public string Content { get; set; }
    }
    private bool _itemIsVisible;
    private SampleData? _data;

    private string ItemStyle()
    {
        return MudExStyleBuilder.Default
            .WithAnimation(AnimationType.FlipY, TimeSpan.FromSeconds(1))
            .WithMargin("0 auto;")
            .WithWidth(300).Style;
    }

    private async Task IsVisibleChanged(bool visible)
    {
        _itemIsVisible = visible;
        if (visible && _data == null)
        {
            await Task.Delay(2000); // Simulate loading
            _data = new SampleData
                {
                    Image = "https://mudblazor.com/images/door.jpg",
                    Title = "Old Paint",
                    Description = "Old paint found on a stone house door.",
                    Content = "This photo was taken in a small village in Istra Croatia."
                };
        }
    }

}