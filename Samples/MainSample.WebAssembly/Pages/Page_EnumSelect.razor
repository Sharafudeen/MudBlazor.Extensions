@page "/enum-select"
@inherits BasePage
@attribute [Demo(Name = "MudExEnumSelect", Icon = Icons.Material.Outlined.List, Documentation = "Demonstration for a simple but very useful Enum Selector", ForComponentType = typeof(MudExEnumSelect<>))]

<DemoComponent PageType="@GetType()">

    <MudCard Class="mb-10" Elevation="6">
        <MudCardHeader>
            <MudText Typo="Typo.h6">@L["Simple Enum"]</MudText>
        </MudCardHeader>
        <MudCardContent>
            <MudGrid>
                <MudItem md="6" Class="d-flex justify-center">
                    <MudExEnumSelect TEnum="TestEnumState" @bind-Value="@State"></MudExEnumSelect>
                </MudItem>
                <MudItem md="3">
                    <MudText>@L["Selected"]: @State</MudText>
                </MudItem>
            </MudGrid>
        </MudCardContent>
    </MudCard>


    <MudCard Class="mb-10" Elevation="6">
        <MudCardHeader>
            <MudText Typo="Typo.h6">@L["Nullable enum"]</MudText>
        </MudCardHeader>
        <MudCardContent>
            <MudGrid>
                <MudItem md="6" Class="d-flex justify-center">
                    <MudExEnumSelect TEnum="TestEnumState?" @bind-Value="@StateNullable"></MudExEnumSelect>

                </MudItem>
                <MudItem md="3">
                    @if (StateNullable.HasValue)
                    {
                        <MudText>@L["Selected"]: @StateNullable</MudText>
                    }
                    else
                    {
                        <MudText>@L["Selected"]: NULL</MudText>
                    }
                </MudItem>
            </MudGrid>
        </MudCardContent>
    </MudCard>
    
    

    
    <MudCard Class="mb-10" Elevation="6">
        <MudCardHeader>
            <MudText Typo="Typo.h6">@L["Flags Enum"]</MudText>
        </MudCardHeader>
        <MudCardContent>
            <MudGrid>
                <MudItem md="6" Class="d-flex justify-center">
                    <MudExEnumSelect TEnum="DinnerItems" @bind-Value="@ChosenDinnerItems"></MudExEnumSelect>
                </MudItem>
                <MudItem md="3">
                    <MudText>@L["Selected"]: @ChosenDinnerItems</MudText>
                </MudItem>
            </MudGrid>
        </MudCardContent>
    </MudCard>
    
    
    <MudCard Class="mb-10" Elevation="6">
        <MudCardHeader>
            <MudText Typo="Typo.h6">@L["Nullable Flags Enum"]</MudText>
        </MudCardHeader>
        <MudCardContent>
            <MudGrid>
                <MudItem md="6" Class="d-flex justify-center">
                    <MudExEnumSelect TEnum="DinnerItems?" @bind-Value="@ChosenDinnerItemsNullable"></MudExEnumSelect>
                </MudItem>
                <MudItem md="3">
                    @if (ChosenDinnerItemsNullable.HasValue)
                    {
                        <MudText>@L["Selected"]: @ChosenDinnerItemsNullable</MudText>
                    }
                    else
                    {
                        <MudText>@L["Selected"]: NULL</MudText>
                    }
                </MudItem>
            </MudGrid>
        </MudCardContent>
    </MudCard>

</DemoComponent>


@code {
    public DinnerItems ChosenDinnerItems { get; set; } = DinnerItems.Appetizer | DinnerItems.Beverage;
    public DinnerItems? ChosenDinnerItemsNullable { get; set; } = DinnerItems.Appetizer | DinnerItems.Beverage;
    public TestEnumState State { get; set; } = TestEnumState.Closed;
    public TestEnumState? StateNullable { get; set; }


    public enum TestEnumState
    {
        Open,
        Closed,
        InProgress,
        Cancelled,
    }

    [Flags] 
    public enum DinnerItems {
        Entree = 1,
        Appetizer = 2,
        Side = 4,
        Dessert = 8,
        Beverage = 16,
        BarBeverage = 32
    }
}