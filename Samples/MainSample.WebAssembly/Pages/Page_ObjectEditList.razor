@page "/object-edit-selection"
@using BlazorJS
@using MudBlazor.Extensions.Components.ObjectEdit.Options
@using Newtonsoft.Json

@attribute [Demo(Group = "MudExObjectEdit", Name = "Configure list values", Documentation = "This demo shows how you can use a selection with MudExSelect with a custom item provider", Icon = Icons.Material.Outlined.List, ForComponentTypes = new[] { typeof(MudExObjectEdit<>), typeof(MudExObjectEditForm<>) })]

<DemoComponent DocFiles="@(new [] {"https://raw.githubusercontent.com/fgilde/MudBlazor.Extensions/main/MudBlazor.Extensions.CodeGator.Adapter/README.md", "Docs/ObjectEdit.md"})" PageType="@GetType()">    
    <MudExObjectEditForm AutoSkeletonOnLoad="true" MetaConfiguration="@Configure" OnValidSubmit="Callback" Value="@Model"></MudExObjectEditForm>
</DemoComponent>


@code {

    public SampleModel Model { get; set; } = new();

    public class SampleModel
    {
        public string Name { get; set; }
        public Brand SelectedBrand { get; set; } = new("Apple", "A tech company");
    }

    public class Brand
    {
        public Brand(string name, string description)
        {
            Name = name;
            Description = description;
        }

        public string Name { get; set; }
        public string Description { get; set; }

    }

    private void Callback(EditContext e)
    {
        JsRuntime.AlertAsync(JsonConvert.SerializeObject(e.Model));
    }

    private void Configure(ObjectEditMeta<SampleModel> meta)
    {
        meta.Property(m => m.SelectedBrand).RenderWith(f => f.SelectedValues, new MudExSelect<Brand>
            {
                MultiSelection = false,
                Placeholder = "Select a brand",
                ToStringFunc = (b) => b?.Name,
                AvailableItemsLoadFunc = (_) => GetBrandsAsync()
            }, b => new List<Brand> {b}, brands => brands?.FirstOrDefault() );       
    }

    private async Task<IList<Brand>> GetBrandsAsync()
    {
        await Task.Delay(400); // Simulate server load
        return GetBrands();
    }

    private static IList<Brand> GetBrands()
    {
        return new List<Brand> {
            new("Apple", "A tech company"),
            new("Google", "what ever"),
            new("Some other", "hat providing samples"),
        };
    }

}

