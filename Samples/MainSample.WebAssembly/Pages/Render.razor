@page "/render/{TypeName?}"
@page "/c/{TypeName?}"
@using Nextended.Core.Extensions
@using MudBlazor.Extensions.Api


@if (!string.IsNullOrEmpty(TypeName) && Type != null)
{
    <HeaderForType Type="@Type" Fallback="@TypeName" />

    @if (AvailableDemo != null)
    {
        <MudAlert Severity="Severity.Info" Variant="Variant.Outlined" AlertTextPosition="AlertTextPosition.Center" ContentAlignment="HorizontalAlignment.Center">
            <a href="@AvailableDemo.Href" target="@AvailableDemo.Target">Here is another Real demo available for @(ApiMemberInfo.GetGenericFriendlyTypeName(Type) ?? TypeName)</a>
        </MudAlert>
    }
    <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
        <MudTabPanel Text="Rendered">
            @if (Type.IsGenericType)
            {
                //type = Type.MakeGenericType(typeof(object));
                <MudAlert ContentAlignment="HorizontalAlignment.Center" Severity="Severity.Error" Variant="Variant.Outlined" Icon="@Icons.Material.Filled.Error">
                    <MudText Color="Color.Error">
                        Can't render a generic type as dynamic currently
                    </MudText>
                </MudAlert>
                @*<DynamicComponent Type="ComponentRenderType"></DynamicComponent>*@
            }
            else
            {
                <DynamicComponent Type="ComponentRenderType"></DynamicComponent>
            }
        </MudTabPanel>
        <MudTabPanel Text="API">
            <MudExApiView Type="@Type"></MudExApiView>
        </MudTabPanel>
    </MudTabs>
}
else
{
    <MudExCardList HoverColor="Color.Info" TData="object">

        @foreach (var nav in Navigations.ReflectMudExComponents().Concat(Navigations.ReflectMudBlazorComponents()))
        {
            <MudCard Class="index-card" @onclick="@(() => { Open(nav); })">
                <MudCardHeader>
                    <CardHeaderContent>

                        @if (nav.Demo is DemoNewAttribute)
                        {
                            <MudAlert Icon="@Icons.Material.Filled.NewLabel" Style="margin-top: -15px;padding: 0;background: transparent;" Variant="Variant.Text" Severity="Severity.Warning">
                                <MudText Typo="Typo.subtitle1">@($"NEW {(nav.Text)}")</MudText>
                                </MudAlert>
                        }
                        else if (nav.Demo is DemoUpdatedAttribute)
                        {
                            <MudAlert Icon="@Icons.Material.Filled.Update" Style="margin-top: -15px;padding: 0;background: transparent;" Variant="Variant.Text" Severity="Severity.Info">
                                <MudText Typo="Typo.subtitle1">@($"UPDATE {(nav.Text)}")</MudText>
                                </MudAlert>
                        }
                        else
                        {
                            <MudText Typo="Typo.h6">@nav.Text</MudText>
                        }

                    </CardHeaderContent>
                    <CardHeaderActions>
                        @*<MudIconButton Icon="@nav.Icon" Color="Color.Default" />*@
                        <MudIcon Color="@nav.GetIconColor()" Icon="@nav.Icon" />
                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardContent>
                    <MudText>@nav.Text</MudText>
                    @if (!string.IsNullOrEmpty(nav.Documentation))
                    {
                        <MudText Typo="Typo.body2">@nav.Documentation</MudText>
                    }
                </MudCardContent>
            </MudCard>
        }
    </MudExCardList>
}

@code {
    private Type? type;
    private string? _typeName;

    [Parameter]
    public string? TypeName
    {
        get => _typeName;
        set
        {
            type = null;
            _typeName = value;
            StateHasChanged();
        }
    }

    NavigationEntry? _availableDemo;
    private string? _doc;

    private void Open(NavigationEntry nav)
    {
        NavigationManager.NavigateTo(nav.Href);

    }
    internal NavigationEntry? AvailableDemo
    {
        get
        {
            _availableDemo ??= DemoAttribute.AllEntries().Recursive(e => e?.Children ?? Enumerable.Empty<NavigationEntry>()).FirstOrDefault(entry => entry?.Demo?.RelatedComponents?.Any(IsMatchType) == true);
            return _availableDemo;
        }
    }

    private bool IsMatchType(Type other)
    {
        return other == Type || (other.IsGenericType && Type is { IsGenericType: true } && Type.GetGenericTypeDefinition() == other.GetGenericTypeDefinition());
    }

    public Type? Type => type ??= GetTypeByName(TypeName);

    private Type? ComponentRenderType => Type != null ? typeof(RenderComponent<>).MakeGenericType(Type) : null;

    internal static Type? GetTypeByName(string typeName)
    {
        try
        {
            if (string.IsNullOrWhiteSpace(typeName))
                return null;

            Type? result = Type.GetType(typeName) ?? Type.GetType($"MudBlazor.Extensions.Components.{typeName}");
            if (result != null)
                return result;
            var types = AppDomain.CurrentDomain.GetAssemblies().SelectMany(s => s.GetTypes()).ToArray();
            result = types.FirstOrDefault(t => t.Name == typeName || t.FullName == typeName);
            if (result != null)
                return result;
            result = types.FirstOrDefault(t => t.IsGenericType && t.Name.StartsWith($"{typeName}`"));
            if (result != null)
                return result;
        }
        catch (Exception)
        {
            return null;
        }
        return null;
    }


}