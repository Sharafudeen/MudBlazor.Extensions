@page "/test"
@using BlazorJS
@using MudBlazor.Extensions.Core
@using MudBlazor.Extensions.Core.Enums
@using Nextended.Core.Extensions


@* <MudExEnumSelect TEnum="TreeViewMode" @bind-Value="@_treeViewMode" Label="TreeViewMode" />
<MudCheckBox @bind-Value="_reverseExpand"></MudCheckBox>

<p>@_selectedNode?.ToString()</p>
<MudExDivider Color="MudExColor.Primary" />

<div style="height: 333px">
    <MudExTreeView @bind-SelectedNode="_selectedNode"
                   Parameters="@(new Dictionary<string, object> { { nameof(MudExCardList<object>.HoverMode), MudExCardHoverMode.Simple } })"
                   ViewMode="_treeViewMode" ExpandButtonDirection="@((_reverseExpand ? LeftOrRight.Right : LeftOrRight.Left ))" Items="@Entries">
        <ItemContentTemplate>
            <p style="text-decoration: underline">@context.Value.ToString()</p>
        </ItemContentTemplate>
    </MudExTreeView>
</div> *@
<style>
    .p-info {
        position: absolute;
        margin-top: 35px;
        margin-left: 15px;
        z-index: 1;
        font-weight: bold;
        color: cadetblue;
    }
</style>

<MudButton OnClick="@StartStopRecording">Start/Stop Capture</MudButton>
<MudCheckBox @bind-Value="_recordAudio">Audio</MudCheckBox>
<MudCheckBox @bind-Value="_captureScreen">Capture Screen</MudCheckBox>
<MudCheckBox @bind-Value="_camera">record Camera</MudCheckBox>
@if (_captureResult != null)
{
    <MudGrid Spacing="4" Justify="Justify.Center">
        <MudItem xs="12">
            <MudPaper Height="400px" Width="100%">
                <p class="p-info">Combined result</p>
                <MudExFileDisplay Style="height: 100%" FileName="Combined result.mp4" Url="@_captureResult.CombinedData.BlobUrl" ContentType="@_captureResult.CombinedData.ContentType"></MudExFileDisplay>
            </MudPaper>
        </MudItem>
        <MudItem xs="6">
            <MudPaper Height="400px" Width="100%">
                <p class="p-info">Audio result</p>
                @if (_captureResult.AudioData != null)
                {
                    <MudExFileDisplay Style="height: 100%" FileName="Audio.mp3" Url="@_captureResult.AudioData.BlobUrl" ContentType="@_captureResult.AudioData.ContentType"></MudExFileDisplay>
                }
            </MudPaper>
        </MudItem>
        <MudItem xs="6">
            <MudPaper Height="400px" Width="100%">
                <p class="p-info">System audio result</p>
                @if (_captureResult.SystemAudioData != null)
                {
                    <MudExFileDisplay Style="height: 100%" FileName="System audio.mp3" Url="@_captureResult.SystemAudioData.BlobUrl" ContentType="@_captureResult.SystemAudioData.ContentType"></MudExFileDisplay>
                }
            </MudPaper>
        </MudItem>
        <MudItem xs="6">
            <MudPaper Height="400px" Width="100%">
                <p class="p-info">Capture result</p>

                @if (_captureResult.CaptureData != null)
                {
                    <MudExFileDisplay Style="height: 100%" FileName="Captured.mp4" Url="@_captureResult.CaptureData.BlobUrl" ContentType="@_captureResult.CaptureData.ContentType"></MudExFileDisplay>
                }
            </MudPaper>
        </MudItem>
        <MudItem xs="6">
            <MudPaper Height="400px" Width="100%">
                <p class="p-info">Camera result</p>
                @if (_captureResult.CameraData != null)
                {
                    <MudExFileDisplay Style="height: 100%" FileName="Camera.mp4" Url="@_captureResult.CameraData.BlobUrl" ContentType="@_captureResult.CameraData.ContentType"></MudExFileDisplay>
                }
            </MudPaper>
        </MudItem>
    </MudGrid>
    <div style="height: 100px;"></div>

}

@code {
    private bool _captureScreen;
    private bool _recordAudio;
    private bool _camera;
    private bool _reverseExpand;
    private NavigationEntry _selectedNode;
    private TreeViewMode _treeViewMode = TreeViewMode.Default;
    public HashSet<NavigationEntry> Entries { get; set; }
    private string _url;
    protected override void OnInitialized()
    {
        //var root = new NavigationEntry("ROOT") { Children = Navigations.Default(NavigationManager) };
        //Entries = new HashSet<NavigationEntry>(new [] {root});
        Entries = Navigations.Default(NavigationManager);
    }

    [Inject]
    private ICaptureService _captureService { get; set; }
    [Inject]
    private IMudExFileService _fileService { get; set; }

    private string _captureId;
    private async Task StartStopRecording(MouseEventArgs obj)
    {
        if (!string.IsNullOrEmpty(_captureId))
        {
            await _captureService.StopCaptureAsync(_captureId);
            _captureId = null;
        }
        else
        {
            var audioDevices = await _captureService.GetAudioDevicesAsync();
            var videoDevices = await _captureService.GetVideoDevicesAsync();
            //var source = await _captureService.SelectCaptureSourceAsync();
            //await JsRuntime.AlertAsync("Click ok to start");
            var options = new CaptureOptions
                {
                    CaptureScreen = _captureScreen,
                    CaptureMediaOptions = _captureScreen ? DisplayMediaOptions.Default : null,
                    //ScreenSource = source,

                    VideoDeviceId = _camera ? videoDevices.FirstOrDefault()?.DeviceId : null,
                    AudioDevices = _recordAudio ? [audioDevices.First().DeviceId] : []
                };
            _captureId = await _captureService.StartCaptureAsync(options, CaptureCallback);
        }
    }


    private CaptureResult _captureResult;
    private void CaptureCallback(CaptureResult obj)
    {
        _captureResult = obj;
        StateHasChanged();
        // _fileService.CreateDataUrlAsync(obj.VideoData, obj.Options.ContentType, true).ContinueWith(task =>
        // {
        //     _url = task.Result;
        //     StateHasChanged();
        // });
    }

}