@page "/shared-config"
@inherits BasePage

@using MudBlazor.Extensions.Options
@using Nextended.Core.Extensions


@attribute [Demo(Group = "MudExObjectEdit", Name = "Edit with shared MetaConfig", Order = 3, Documentation = "MudExObjectEdit and MudExCollectionEditor with a shared config", Icon = Icons.Material.Outlined.Person, ForComponentTypes = new[] { typeof(MudExObjectEdit<>), typeof(MudExCollectionEditor<>), typeof(MudExObjectEditForm<>) })]



<DemoComponent PageType="@GetType()" DocFiles="@(new [] {"Docs/ObjectEdit.md"})" CodeFiles="@(new []{$"Pages/{GetType().Name}.razor", "ObjectEditMetaConfig/SomeClassWithUserMetaConfiguration.cs", "ObjectEditMetaConfig/UserModelMetaConfiguration.cs"})">
    <MudButton Variant="Variant.Outlined" Color="Color.Primary" EndIcon="@Icons.Material.Filled.PersonAdd" OnClick="@AddUser">@L["Add user to both lists"]</MudButton>

    <h2 style="text-decoration: underline">@L["Edit a complex Model with included Collection of users"]</h2>
    <MudExObjectEditForm DefaultGroupName="Data" Value="@Model"></MudExObjectEditForm>

    
    <h2 style="text-decoration: underline">@L["Edit only a Collection of users"]</h2>
    <br />
    
    <MudButton Variant="Variant.Outlined" Color="Color.Primary" EndIcon="@Icons.Material.Filled.PersonAdd" OnClick="@AddSome">@L["Add 1000 random items"]</MudButton>
    <MudExCollectionEditor DialogOptions="@Options" MaxHeight="500" Items="@Users"></MudExCollectionEditor>
</DemoComponent>

@code {
    public SomeClassWithUser Model { get; set; } = new();

    public List<UserModel> Users { get; set; } = new()
    {
        new() {FirstName = "Florian", LastName = "Gilde", Password = "xyz1234"},
        new () {FirstName = "Peter", LastName = "Griffin", Password = "jdojdo90udu"},
        new() { FirstName = "Bart", LastName = "Simpson", Password = "ayCaramba" }
    };

    public DialogOptionsEx Options => new()
        {
            MaximizeButton = true,
            CloseButton = true,
            CloseOnEscapeKey = true,
            MaxWidth = MaxWidth.Medium,
            FullWidth = true,
            DragMode = MudDialogDragMode.Simple,
            Animations = new[] { AnimationType.Perspective3d },
            Position = DialogPosition.BottomCenter
        };

    private async Task AddUser()
    {
        var res = await DialogService.EditObjectAsync<UserModel>(new UserModel(), L["Add user"], Options.SetProperties(o => o.Position = DialogPosition.TopCenter), null, new DialogParameters()
        {
            {nameof(MudExObjectEditDialog<UserModel>.CancelButtonText), L["Cancel"].Value},
            {nameof(MudExObjectEditDialog<UserModel>.SaveButtonText), L["Confirm"].Value},
            {nameof(MudExObjectEditDialog<UserModel>.SaveButtonColor), Color.Surface}
        });

        if (!res.Cancelled && res.Result != null && !string.IsNullOrEmpty(res.Result.FirstName))
        {
            Users.Add(res.Result);
            Model.Users.Add(res.Result);
        }
    }

    private Task AddSome()
    {
        var count = Users.Count;
        Users.AddRange(Enumerable.Range(1, 1000).Select(x => new UserModel {Password = $"{Guid.NewGuid()}", FirstName = $"User {x + count}", LastName = $"Last {x + count}"}).ToList());
        return Task.CompletedTask;
    }

}
