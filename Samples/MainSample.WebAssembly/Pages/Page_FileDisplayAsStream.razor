@page "/handle-file-as-streams"
@inherits BasePage
@using MainSample.WebAssembly.Services
@using MudBlazor.Extensions.Options
@inject SampleDataService sampleDataService

@attribute [Demo(Group = "File Handling", Name = "File Display with Stream", Order = 0, Documentation = "The sample is the same as the other FileDisplay example, but with the difference that no URL is used; instead, streams are loaded and used.", Icon = Icons.Material.Outlined.FolderZip, ForComponentTypes = new[] { typeof(MudExFileDisplay) })]

<DemoComponent PageType="@GetType()" CodeFiles="@(new [] {$"Pages/{GetType().Name}.razor", "Shared/MySimpleJsonDisplay.razor", "SampleDataService.cs"})">
    
    @if (_loading)
    {
        <MudProgressLinear Color="Color.Secondary" Indeterminate="true" />
    }
    <MudExSelect Disabled="@_loading" T="SampleFileWithStream" ValuePresenter="ValuePresenter.ItemContent" HelperText="@L["Select sample file (See weather.json to check how own components for files can be created)"]" ItemCollection="@_samples" Variant="Variant.Outlined" ToStringFunc="@(f => f?.Name ?? "")" @bind-Value="SampleFile">
        <ItemTemplate>
                <div class="file-combo-item">
                    <MudExIcon Color="@context.Color" Icon="@context.Icon"></MudExIcon>
                    <MudText>@context.Name</MudText>
                    <MudText Class="file-combo-info-item" Typo="Typo.subtitle2">@($"{context.ContentType} {context.ReadableSize}")</MudText>
                </div>
        </ItemTemplate>    
    </MudExSelect>

    @if (SampleFile?.Stream != null)
    {
        <div style="width: 100%; height: 800px; margin-top: 20px">
            <MudExFileDisplay HandleContentErrorFunc="@HandleContentError"
                              StreamUrlHandling="StreamUrlHandling.BlobUrl"
                              ParametersForSubControls="@GetParams()"
                              Dense="true"
                          FileName="@SampleFile.Name" ContentStream="@SampleFile.Stream" ContentType="@SampleFile.ContentType"></MudExFileDisplay>
        </div>
        <MudButton OnClick="@OpenAsDialog" Variant="Variant.Filled" Color="Color.Primary">Show As Dialog</MudButton>
    }
</DemoComponent>


@code {

    private List<SampleFileWithStream> _samples = new ();
    private bool _loading;
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        if (MainLayout.Instance != null)
            MainLayout.Instance.ThemeChanged += InstanceOnThemeChanged;
        _loading = true;
        _samples.AddRange(await sampleDataService.GetSampleFilesWithStreamAsync());
        _loading = false;
    }

    private void InstanceOnThemeChanged(object? sender, MainLayout.ThemeChangedEventArgs e)
    {
        StateHasChanged();
    }

    private async Task OpenAsDialog()
    {
        var parameters = new DialogParameters {
            { nameof(MudExFileDisplay.StreamUrlHandling), StreamUrlHandling.BlobUrl },
            { nameof(MudExFileDisplay.Dense), true }
        };
        await DialogService.ShowFileDisplayDialogAsync(SampleFile.Stream, SampleFile.Name, SampleFile.ContentType, HandleContentError, null, parameters);
    }

    private Task<MudExFileDisplayContentErrorResult> HandleContentError(IMudExFileDisplayInfos arg)
    {
        if (arg.ContentType.Contains("word"))
        {
            return Task.FromResult(MudExFileDisplayContentErrorResult
                .RedirectTo("https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTiZiqnBKWS8NHcKbRH04UkYjrCgxUMz6sVNw&usqp=CAU", "image/png")
                .WithMessage(L["No word plugin found we display a sheep"]));
        }
        return Task.FromResult(MudExFileDisplayContentErrorResult.Unhandled);
    }

    public SampleFileWithStream SampleFile { get; set; }

    private IDictionary<string, object> GetParams()
    {
        return new Dictionary<string, object>
        {
            {nameof(MudExFileDisplayCode.Theme), GetTheme()},
            {nameof(MudExFileDisplayMarkdown.CodeBlockTheme), GetTheme()},
        };
    }

    private CodeBlockTheme GetTheme() => MainLayout.GetCodeBlockTheme();
}