@page "/dialog-object-edit"
@using System.ComponentModel.DataAnnotations
@using Newtonsoft.Json


@attribute [Demo(Group = "MudExObjectEdit", Name = "Object Edit in Dialog", Order = 5, Documentation = "See how to use MudExObjectEdit in a dialog", Icon = Icons.Material.Outlined.DesktopWindows, ForComponentTypes = new[] { typeof(MudExObjectEdit<>), typeof(MudExObjectEditForm<>), typeof(MudExObjectEditDialog<>) })]

<DemoComponent PageType="@GetType()" CodeFiles="@(new []{$"Pages/{GetType().Name}.razor", "SampleDialogOptions.cs"})">
    <MudButton OnClick="@ShowSampleDialog" Variant="Variant.Filled" Color="Color.Primary">Edit Test Object</MudButton>
</DemoComponent>

@code {

    public class TestObject
    {
        [Required]
        public string Value { get; set; } = "Test";
        [Range(1, 100)]
        public int Number { get; set; }
        public double ADblNumber { get; set; }
        public decimal DNumber { get; set; }
        public float FNumber { get; set; }
        public LogLevel logLevel { get; set; }
        public SomeOther Some { get; set; }
        [Required]
        public UploadableFile UploadRequest { get; set; }

        public List<string> Names { get; set; }
        public Page_ObjectEdit.Address Address { get; set; }
        public Page_ObjectEdit.UserInformation UserInformation { get; set; }
    }

    public class SomeOther
    {
        public string Id { get; set; }
        public string Name { get; set; }
    }

    private async Task ShowSampleDialog()
    {
        DialogParameters parameters = new DialogParameters
        {
            { nameof(MudExObjectEditDialog<TestObject>.AutoSaveRestoreState), true },
            { nameof(MudExObjectEditDialog<TestObject>.SetPropertiesAfterImport), true },
            { nameof(MudExObjectEditDialog<TestObject>.AllowExport), true },
            { nameof(MudExObjectEditDialog<TestObject>.AllowImport), true }
        };
        var res = await DialogService.EditObjectAsync(new TestObject(), "Auto Generated Editor for TestObject", OnSubmit, SampleDialogOptions.FullSlideFromRight, 
        meta => meta.WrapEachInMudItem(i => i.xs = 6)
            .Property(m => m.UploadRequest)
            .WithoutLabel()            
            .WithAdditionalAttributes<MudExUploadEdit<UploadableFile>>(a => a.MimeTypes = ["image/*"])
            .WrapInMudItem(i => i.xs = 12), 
        parameters);

        if (!res.Cancelled)
            await JsRuntime.InvokeVoidAsync("alert", JsonConvert.SerializeObject(res.Result));
    }
    

    private async Task<string> OnSubmit(TestObject value, MudExObjectEditDialog<TestObject> dialog)
    {
        Console.WriteLine(value?.UploadRequest?.Data?.Length);
        await Task.Delay(2000); // Simulate server save
        if (value.Value == "Test")
            return "'Test' is as Value not allowed or already exists";
        if (value.Value == "Exception")
            throw new Exception("This is a test exception");
        return null;
    }

}
