@page "/upload-edit"
@using MudBlazor.Extensions.Components.ObjectEdit.Options
@using MudBlazor.Extensions.Core
@using Nextended.Core.Extensions
@attribute [DemoUpdated(Group = "File Handling", Name = "Upload Edit", Documentation = "Demo for the MudExUploadEdit.", Order = 5, Icon = Icons.Material.Outlined.Upload, ForComponentType = typeof(MudExUploadEdit<>))]


<DemoComponent DocFiles="@(new [] {"Docs/MudExUploadEdit.md"})" Title="MudExUploadEdit" PageType="@GetType()">
    <SplitContainer>
        <Left>
            <MudCard Style="width: 80%">
                <MudCardContent>
                    <MudExUploadEdit 
                        AllowAudioRecording="true"
                        AllowVideoCapture="true"
                        DropZoneClickAction="DropZoneClickAction.UploadFile"
                        CodeBlockTheme="@MainLayout.GetCodeBlockTheme()"
                        MimeTypes="@mimeTypes" T="UploadableFile" Style="max-height: 400px; width: 100%" @ref="component">
                    </MudExUploadEdit>
                </MudCardContent>
                <MudCardActions>
                    <div class="mt-6" style="width: 100%; display: flex; justify-content: center; align-items: center">
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@ShowUploadDialog">Upload in dialog</MudButton>
                    </div>
                </MudCardActions>
            </MudCard>
        </Left>
        <Right>
            <ComponentPropertyGrid GroupByTypes="true" DefaultGroupName="Misc" MetaConfiguration="@Configure()" Value="@component"></ComponentPropertyGrid>
        </Right>
    </SplitContainer>
</DemoComponent>


@code {
    MudExUploadEdit<UploadableFile> component;

    private string[] mimeTypes =
    {
        "application/zip*",
        "application/x-zip*",
        "application/x-compressed",
        "application/x-rar-compressed",
        "audio/*",
        "application/pdf",
        "application/xml",
        "application/msword",
        "application/vnd.ms-excel",
        "application/vnd.openxmlformats-officedocument.*",
        "image/*",        
        "text/*"
    };

    protected override Task OnInitializedAsync()
    {
        if (MainLayout.Instance != null)
            MainLayout.Instance.ThemeChanged += InstanceOnThemeChanged;
        return Task.CompletedTask;
    }

    private void InstanceOnThemeChanged(object? sender, MainLayout.ThemeChangedEventArgs e)
    {
        StateHasChanged();
    }

    private async Task ShowUploadDialog()
    {
        var parameters = new DialogParameters
        {
            { nameof(MudExMessageDialog.Buttons), MudExDialogResultAction.OkCancel("Upload") },
            { nameof(MudExMessageDialog.Icon), Icons.Material.Filled.FileUpload }
        };
        var res = await DialogService.ShowComponentInDialogAsync<MudExUploadEdit<UploadableFile>>("Upload content", "Upload content files as zip or separate",
            uploadEdit =>
            {
                uploadEdit.AllowAudioRecording = true;
                uploadEdit.MinHeight = 400;
                uploadEdit.AutoExtractArchive = true;
                uploadEdit.DropZoneClickAction = DropZoneClickAction.UploadFile;
                uploadEdit.MimeTypes = mimeTypes;
            }, parameters, options =>
            {
                options.Resizeable = true;
                options.FullWidth = true;
                options.MaxWidth = MaxWidth.Medium;
                options.DialogAppearance = MudExAppearance.FromStyle(new
                    {
                        Border = "2px solid",
                        BorderColor = Color.Primary,
                        BorderRadius = 8
                    });
            });
        if (!res.DialogResult.Canceled)
        {
            component.UploadRequests.AddRange(res.Component.UploadRequests);
            StateHasChanged();
        }
    }
    
    private Action<ObjectEditMeta<MudExUploadEdit<UploadableFile>>> Configure()
    {
        return meta =>
        {
            meta.Property(m => m.LoadFileDataBytesInBackground).IgnoreIf(e => !e.AutoLoadFileDataBytes);
            meta.Property(m => m.AllowDuplicates).IgnoreIf(e => !e.AutoLoadFileDataBytes);
            meta.Property(m => m.ShowProgressForLoadingData).IgnoreIf(e => !e.LoadFileDataBytesInBackground);
            meta.IgnoreAllReadOnlyFields();
            meta.Properties(
                ue => ue.Localizer,
                ue => ue.UploadFieldId,
                ue => ue.UploadRequests,
                ue => ue.UploadRequest,
                ue => ue.SelectedRequests,
                ue => ue.RemoveErrorAfter,
                ue => ue.ResolvePreviewDataUrlFunc,
                ue => ue.ResolveContentTypeFromUrlFunc,
                ue => ue.HandlePreviewContentErrorFunc
                ).Ignore();
        };
    }

}