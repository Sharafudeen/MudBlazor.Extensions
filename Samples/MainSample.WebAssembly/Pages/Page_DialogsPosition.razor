@page "/dialogs-pos-size"
@implements IAsyncDisposable
@using MudBlazor.Extensions.Options
@using MudBlazor.Extensions.Core
@using MudBlazor.Extensions.Helper
@using MudBlazor.Interop

@attribute [Demo(Group = "Dialog Samples", Name = "Position/Size Sample", Documentation = "Demo for using DialogOptionsEx and pass position and size", Order = 60, Icon = MaterialDesignIcons.Normal.ImageSizeSelectLarge)]


<DemoComponent PageType="@GetType()">
    <MudGrid Style="width: 100%" Justify="Justify.Center">
        <MudItem xs="12">
            <MudAlert><p> This demo uses the IDialogEventService to check resize or dragged and stores the latest position and size as relative values and restore them on next open </p></MudAlert>
        </MudItem>
        <MudItem xs="3" Class="mb-4">
            <MudButton Class="m-4" OnClick="@ShowSampleDialog" Variant="Variant.Filled" Color="Color.Primary">Show Sample Dialog</MudButton>
        </MudItem>
    </MudGrid>
</DemoComponent>

@code {
    [Inject] private IDialogEventService EventService { get; set; }

    private MudExDimension? _lastSize;
    private MudExPosition? _lastPosition;

    protected override void OnInitialized()
    {
        EventService.Subscribe<DialogDragEndEvent>(HandleDragged);
        EventService.Subscribe<DialogResizedEvent>(HandleResized);
    }

    private Task HandleDragged(DialogDragEndEvent arg)
    {
        return Store(arg.Rect);
    }

    private Task HandleResized(DialogResizedEvent arg)
    {
        return Store(arg.Rect);
    }

    private Task Store(BoundingClientRect argRect)
    {
        if (argRect is { Left: > 0, Top: > 0, Width: > 0, Height: > 0 })
        {            
            _lastPosition = argRect.ToPosition(CssUnit.Percentage);
            _lastSize = argRect.ToDimension(CssUnit.Percentage);            
        }
        return Task.CompletedTask;
    }


    private async Task ShowSampleDialog()
    {
        var options = DialogOptionsEx.DefaultDialogOptions.CloneOptions();
        options.Resizeable = true;
        options.DragMode = MudDialogDragMode.Simple;
        options.CustomPosition = _lastPosition;
        if (_lastSize != null)
        {
            options.CustomSize = _lastSize;
            options.MaxWidth = MaxWidth.ExtraExtraLarge;
            options.MaxHeight = MaxHeight.ExtraExtraLarge;
        }
        IMudExDialogReference<SampleDialog>? dlgReference = await DialogService.ShowExAsync<SampleDialog>("Simple Dialog", dialog => { dialog.ContentMessage = "Hello from dialog sample page"; }, options);
    }

    public ValueTask DisposeAsync()
    {
        EventService.Unsubscribe<DialogDragEndEvent>(HandleDragged);
        EventService.Unsubscribe<DialogResizedEvent>(HandleResized);
        return ValueTask.CompletedTask;   
    }

}
