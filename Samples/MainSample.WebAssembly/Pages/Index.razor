@page "/"
@inherits BasePage

@using Microsoft.Extensions.Localization
@using MudBlazor.Extensions.Helper
@using MudBlazor.Extensions.Core
@using Newtonsoft.Json

<style>
    .mud-ex-object-edit-group-flat .mud-expand-panel-text:after {
        background-color: var(@Color.Secondary.CssVarName());
    }
</style>


<MudHidden Breakpoint="Breakpoint.SmAndDown">
    <MudExGradientText Animate="false"
    Style="margin-bottom: 30px;" Align="Align.Center" Typo="Typo.h2">MudBlazor.Extensions</MudExGradientText>
</MudHidden>
<MudHidden Breakpoint="Breakpoint.SmAndDown" Invert="true">
    <MudExGradientText Animate="false"
    Style="margin-bottom: 30px;" Align="Align.Center" Typo="Typo.h4">MudBlazor.Extensions</MudExGradientText>
</MudHidden>
<Support />

<MudExCardList HoverMode="@(MudExCardHoverMode.Zoom | MudExCardHoverMode.CardEffect3d | MudExCardHoverMode.LightBulb)" HoverColor="Color.Warning" TData="object">
    <MudCard Class="index-card" @onclick="@(() => { NavigationManager.NavigateTo("/structured-data-edit"); })">
        <MudCardHeader >
            <CardHeaderContent>
                <div style="display: flex;">
                    <MudIcon Color="Color.Secondary" Size="Size.Large" Icon="@Icons.Custom.FileFormats.FileCode"/>
                    <MudText Class="ml-5" Typo="Typo.h6">MudExStructuredDataEditor</MudText>
                </div>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent >
            <MudText>@L["You don't need an extra JsonEditor anymore"]</MudText>
            <MudText Typo="Typo.body2">@L["Powerful UI Editor for json, xml or yaml content now also as viewer for MudExFileDisplay"]</MudText>
                                          </MudCardContent>
    </MudCard>

    <MudCard Class="index-card" @onclick="@(() => { NavigationManager.NavigateTo(AppConstants.Urls.GetTryOnline(MainLayout.Instance.IsDark)); })">
        <MudCardHeader >
            <CardHeaderContent>
                <div style="display: flex;">
                    <MudIcon Color="Color.Primary" Size="Size.Large" Icon="@Icons.Custom.Brands.MicrosoftVisualStudio"/>
                    <MudText Class="ml-5" Typo="Typo.h6">@L["Try MudEx online CodeEditor"]</MudText>
                                                            </div>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent >
            <MudText>@L["Play around with MudBlazor and MudBlazor.Extensions in an online Code Editor"]</MudText>
                        <MudText Typo="Typo.body2">@L["Test and use components live without required environment"]</MudText>
            </MudCardContent>
    </MudCard>

    <MudCard Class="index-card" @onclick="@(() => { NavigationManager.NavigateTo("/theme-edit"); })">
        <MudCardHeader >
            <CardHeaderContent>
                <div style="display: flex;">
                    @((MarkupString)MudExSvg.ApplicationImage(ClientTheme.CurrentTheme, new MudExDimension(70, 50)))
                    <MudText Class="ml-5" Typo="Typo.h6">@L["Check out the MudExThemeEdit Component"]</MudText>
                </div>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent >
            <MudText>@L["Change or edit your theme"]</MudText>
            <MudText Typo="Typo.body2">@L["Test the powerful MudExThemeEdit and change theme colors fonts and more"]</MudText>
                                          </MudCardContent>
    </MudCard>
</MudExCardList>

<MudExCardList HoverMode="@(MudExCardHoverMode.Zoom | MudExCardHoverMode.LightBulb)" HoverColor="Color.Warning" TData="object">
    <MudCard Class="index-card" 
    Style="@MudExStyleBuilder.Default.WithAnimatedConicGradientBorderedBackground(2, [MudExColor.Surface], ["#3300aa", "#0066aa", MudExColor.Info, MudExColor.Success, "purple"], TimeSpan.FromSeconds(5)).WithMaxWidth("none").WithWidth("100%").WithMarginLeft("10%").WithMarginRight("10%").Style" 
    @onclick="@(() => { NavigationManager.NavigateTo("/dialog-snap"); })">
        <MudCardHeader>
            <CardHeaderContent>
                <div style="display: flex;">
                    <MudIcon Color="Color.Secondary" Size="Size.Large" Icon="@MaterialDesignIcons.Normal.DockWindow" />
                    <MudText Class="ml-5" Typo="Typo.h6">@L["Dialog Drag & Drop"]</MudText>
                                                            </div>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent>
            <MudText>@L["NEW Dialog Drag Drop Mode"]</MudText>
                        <MudText Typo="Typo.body2">@L["New dialog Feature - SnapDrag"]</MudText>
                                                      </MudCardContent>
    </MudCard>

</MudExCardList>


<div class="mt-5 mb-5" style="display: flex; justify-content: center; align-items: center;">
    <MudToggleGroup T="Type" SelectionMode="SelectionMode.MultiSelection" @bind-Values="_selectedAttributeTypes">
        <MudToggleItem Value="@(typeof(DemoAttribute))">
            <MudIcon Icon="@Icons.Material.Filled.Circle" Size="Size.Small" Color="Color.Default" />
            <MudText Class="ml-3"> @L["Other"] </MudText>
                                      </MudToggleItem>
        <MudToggleItem Value="@(typeof(DemoNewAttribute))">
            <MudIcon Icon="@Icons.Material.Filled.Circle" Size="Size.Small" Color="Color.Warning" />
            <MudText Class="ml-3"> @L["New"] </MudText>
                                      </MudToggleItem>
        <MudToggleItem Value="@(typeof(DemoUpdatedAttribute))">
            <MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.Circle" Color="Color.Info" />
            <MudText Class="ml-3"> @L["Updated"] </MudText>
                                      </MudToggleItem>
    </MudToggleGroup>
</div>

<MudExpansionPanels MultiExpansion="true">
    <MudExpansionPanel Expanded="true" Class="@($"mt-3 {("mud-ex-object-edit-group-flat")}")" Text="@L["DEMOS"]">
        <MudExCardList TData="object">

            @foreach (var nav in DemoAttribute.AllEntries(true).Where(n => !_selectedAttributeTypes.Any() || _selectedAttributeTypes.Contains(n?.Demo?.GetType())))
            {
                <MudCard Class="index-card" @onclick="@(() => { Open(nav); })">
                    <MudCardHeader >
                        <CardHeaderContent>
                            @RenderNavEntry(nav,L)
                        </CardHeaderContent>
                        <CardHeaderActions>
                            <MudIcon Color="@nav.GetIconColor()" Icon="@nav.Icon" />
                        </CardHeaderActions>
                    </MudCardHeader>
                    <MudCardContent >
                        <MudText>@L[nav.Text]</MudText>
                        @if (!string.IsNullOrEmpty(nav.Documentation))
                        {
                            <MudText Typo="Typo.body2">@L[nav.Documentation]</MudText>
                        }
                    </MudCardContent>
                </MudCard>
            }
        </MudExCardList>
    </MudExpansionPanel>

    <MudExpansionPanel Expanded="true" Class="@($"mt-3 {("mud-ex-object-edit-group-flat")}")" Text="@L["ALL COMPONENTS"]">
        <MudExCardList HoverColor="Color.Info" TData="object">

            @foreach (var nav in Navigations.ReflectMudExComponents())
            {
                <MudCard Class="index-card" @onclick="@(() => { Open(nav); })">
                    <MudCardHeader >
                        <CardHeaderContent>
                            @RenderNavEntry(nav,L)
                        </CardHeaderContent>
                        <CardHeaderActions>
                            @*<MudIconButton Icon="@nav.Icon" Color="Color.Default" />*@
                            <MudIcon Color="@nav.GetIconColor()" Icon="@nav.Icon" />
                        </CardHeaderActions>
                    </MudCardHeader>
                    <MudCardContent >
                        <MudText>@nav.Text</MudText>
                        @if (!string.IsNullOrEmpty(nav.Documentation))
                        {
                            <MudText Typo="Typo.body2">@L[nav.Documentation]</MudText>
                        }
                    </MudCardContent>
                </MudCard>
            }
        </MudExCardList>
    </MudExpansionPanel>

</MudExpansionPanels>

@code
{

    internal static RenderFragment RenderNavEntry(NavigationEntry nav, IStringLocalizer<BasePage> l)
    {
        return @<div>
                   <MudAlert Icon="@nav?.Demo?.GetIconStatusIcon()" Style="margin-top: -15px;padding: 0;background: transparent;" Variant="Variant.Text" Severity="@(nav?.Demo?.Severity ?? Severity.Normal)">
                       <MudText Typo="Typo.subtitle1">@l[($"{(nav.Demo?.RelatedComponents?.FirstOrDefault()?.Name?.Split('`')?.FirstOrDefault() ?? nav.Text)}")]</MudText>
                   </MudAlert>
                   @if (nav?.Demo is DemoNewAttribute or DemoUpdatedAttribute)
                   {
                       <MudChip T="NavigationEntry" Style="float: right; margin-right: -27px;" Size="Size.Small" Variant="Variant.Text"
                                Color="@nav.Demo.IconColor">
                           @l[(nav?.Demo.GetType().Name.Replace("Demo", "").Replace("Attribute", ""))]
                       </MudChip>
                   }
        </div>;
    }
    private IEnumerable<Type> _selectedAttributeTypes = Type.EmptyTypes;
    private void Open(NavigationEntry nav)
    {
        NavigationManager.NavigateTo(nav.Href);
    }
}