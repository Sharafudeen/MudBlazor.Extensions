@page "/capture-service"

@using MudBlazor.Extensions.Core
@using MudBlazor.Extensions.Helper
@using MudBlazor.Extensions.Options
@using Nextended.Core.Extensions

@attribute [DemoNew(Name = "Capture service", Order = 0, Icon = Icons.Material.Outlined.AccountTree, Documentation = "This sample demonstrate how to use the MudExCaptureService", ForComponentType = typeof(ICaptureService))]

<style>
    .p-info {
        position: absolute;
        margin-top: 35px;
        margin-left: 15px;
        z-index: 1;
        font-weight: bold;
        color: cadetblue;
    }
</style>


<DemoComponent PageType="@GetType()">

    <MudButton Class="mt-5" Variant="Variant.Outlined" Color="@(_captureId == null ? Color.Default : Color.Error)" OnClick="@StartStopRecording">@(_captureId == null ? "Start Capture" : "Stop Capture")</MudButton>

    @if (_captureResult != null)
    {
        <MudGrid Spacing="4" Justify="Justify.Center">
            <MudItem xs="12">
                <MudPaper Height="400px" Width="100%">
                    <p class="p-info">Combined result</p>
                    <MudExFileDisplay Style="height: 100%" FileName="Combined result.mp4" Url="@_captureResult.CombinedData.BlobUrl" ContentType="@_captureResult.CombinedData.ContentType"></MudExFileDisplay>
                </MudPaper>
            </MudItem>
            <MudItem xs="6">
                <MudPaper Height="400px" Width="100%">
                    <p class="p-info">Audio result</p>
                    @if (_captureResult.AudioData != null)
                    {
                        <MudExFileDisplay Style="height: 100%" FileName="Audio.mp3" Url="@_captureResult.AudioData.BlobUrl" ContentType="@_captureResult.AudioData.ContentType"></MudExFileDisplay>
                    }
                </MudPaper>
            </MudItem>
            <MudItem xs="6">
                <MudPaper Height="400px" Width="100%">
                    <p class="p-info">System audio result</p>
                    @if (_captureResult.SystemAudioData != null)
                    {
                        <MudExFileDisplay Style="height: 100%" FileName="System audio.mp3" Url="@_captureResult.SystemAudioData.BlobUrl" ContentType="@_captureResult.SystemAudioData.ContentType"></MudExFileDisplay>
                    }
                </MudPaper>
            </MudItem>
            <MudItem xs="6">
                <MudPaper Height="400px" Width="100%">
                    <p class="p-info">Capture result</p>

                    @if (_captureResult.CaptureData != null)
                    {
                        <MudExFileDisplay Style="height: 100%" FileName="Captured.mp4" Url="@_captureResult.CaptureData.BlobUrl" ContentType="@_captureResult.CaptureData.ContentType"></MudExFileDisplay>
                    }
                </MudPaper>
            </MudItem>
            <MudItem xs="6">
                <MudPaper Height="400px" Width="100%">
                    <p class="p-info">Camera result</p>
                    @if (_captureResult.CameraData != null)
                    {
                        <MudExFileDisplay Style="height: 100%" FileName="Camera.mp4" Url="@_captureResult.CameraData.BlobUrl" ContentType="@_captureResult.CameraData.ContentType"></MudExFileDisplay>
                    }
                </MudPaper>
            </MudItem>
        </MudGrid>
        <div style="height: 100px;"></div>
    }

</DemoComponent>

@code {


    [Inject] private ICaptureService _captureService { get; set; }
    [Inject] private IDialogService _dialogService { get; set; }

    private CaptureResult? _captureResult;
    private string? _captureId;

    private async Task StartStopRecording(MouseEventArgs obj)
    {
        if (!string.IsNullOrEmpty(_captureId))
        {
            await _captureService.StopCaptureAsync(_captureId);
        }
        else
        {
            var options = await Test();

            if (options != null && options.Valid())
                _captureId = await _captureService.StartCaptureAsync(options, CaptureCallback, s => _captureId = null);
        }
    }

    private async Task<CaptureOptions?> Test()
    {
        var options = new CaptureOptions();

        var dialogOptionsEx = DialogOptionsEx.DefaultDialogOptions.CloneOptions().SetProperties(o =>
        {
            o.DialogAppearance = MudExAppearance.FromCss(MudExCss.Classes.Dialog.FullHeightWithMargin);
            o.MaxWidth = MaxWidth.Medium;
            o.FullWidth = true;
            o.MaxHeight = MaxHeight.Medium;
            o.FullHeight = true;
            o.Resizeable = true;
            o.DragMode = MudDialogDragMode.Simple;
        });

        var result = await _dialogService.EditObject(options, "Capture", Icons.Material.Filled.VideoCameraFront, dialogOptionsEx);
        if (result.Cancelled)
            return null;
        return result.Result;
    }
    

    private void CaptureCallback(CaptureResult obj)
    {
        _captureResult = obj;
        StateHasChanged();
    }

}