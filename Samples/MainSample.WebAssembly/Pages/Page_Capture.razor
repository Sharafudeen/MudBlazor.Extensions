@page "/capture-service"

@using MudBlazor.Extensions.Core;
@using MudBlazor.Extensions.Core.Capture;
@using MudBlazor.Extensions.Core.W3C

@attribute [DemoNew(Name = "Capture service", Order = 0, Icon = Icons.Material.Outlined.VideoCameraBack, Documentation = "This sample demonstrate how to use the MudExCaptureService", ForComponentType = typeof(ICaptureService))]

<style>
    .p-info {
        position: absolute;
        margin-top: 35px;
        margin-left: 15px;
        z-index: 1;
        font-weight: bold;
        color: cadetblue;
    }
</style>


<DemoComponent PageType="@GetType()">

    @if (_captureId != null)
    {
        <MudButton Class="ma-5" StartIcon="@Icons.Material.Filled.Stop" Variant="Variant.Filled" Color="Color.Error" OnClick="@StopRecording">Stop Capture</MudButton>
    }
    else
    {
        <MudMenu Class="ma-5" StartIcon="@Icons.Material.Filled.VideoCameraBack" EndIcon="@Icons.Material.Filled.KeyboardArrowDown" Label="Start Capture" Color="Color.Primary" Variant="Variant.Filled">
            <MudMenuItem OnClick="@RecordScreen">Record Screen</MudMenuItem>
            <MudMenuItem OnClick="@RecordMainCamera">Record Main Camera</MudMenuItem>
            <MudMenuItem OnClick="@RecordMainCameraLow">Record Main Camera Lower Quality</MudMenuItem>
            <MudMenuItem OnClick="@Record">Specify Options...</MudMenuItem>
            <MudMenuItem OnClick="@RecordQuick">Specify Quick Options...</MudMenuItem>
        </MudMenu>
    }

    @if (_captureResult != null && _captureId == null)
    {
        <MudGrid Spacing="4" Justify="Justify.Center">
            <MudItem xs="12">
                <MudPaper Height="400px" Width="100%">
                    <p class="p-info">Combined result</p>
                    <MudExFileDisplay Dense="true" Style="height: 100%" FileName="Combined result.mp4" Url="@_captureResult.CombinedData.BlobUrl" ContentType="@_captureResult.CombinedData.ContentType"></MudExFileDisplay>
                </MudPaper>
            </MudItem>
            <MudItem xs="6">
                <MudPaper Height="400px" Width="100%">
                    <p class="p-info">Audio result</p>
                    @if (_captureResult.AudioData != null)
                    {
                        <MudExFileDisplay Dense="true" Style="height: 100%" FileName="Audio.mp3" Url="@_captureResult.AudioData.BlobUrl" ContentType="@_captureResult.AudioData.ContentType"></MudExFileDisplay>
                    }
                </MudPaper>
            </MudItem>
            <MudItem xs="6">
                <MudPaper Height="400px" Width="100%">
                    <p class="p-info">System audio result</p>
                    @if (_captureResult.SystemAudioData != null)
                    {
                        <MudExFileDisplay Dense="true" Style="height: 100%" FileName="System audio.mp3" Url="@_captureResult.SystemAudioData.BlobUrl" ContentType="@_captureResult.SystemAudioData.ContentType"></MudExFileDisplay>
                    }
                </MudPaper>
            </MudItem>
            <MudItem xs="6">
                <MudPaper Height="400px" Width="100%">
                    <p class="p-info">Capture result</p>

                    @if (_captureResult.CaptureData != null)
                    {
                        <MudExFileDisplay Dense="true" Style="height: 100%" FileName="Captured.mp4" Url="@_captureResult.CaptureData.BlobUrl" ContentType="@_captureResult.CaptureData.ContentType"></MudExFileDisplay>
                    }
                </MudPaper>
            </MudItem>
            <MudItem xs="6">
                <MudPaper Height="400px" Width="100%">
                    <p class="p-info">Camera result</p>
                    @if (_captureResult.CameraData != null)
                    {
                        <MudExFileDisplay Dense="true" Style="height: 100%" FileName="Camera.mp4" Url="@_captureResult.CameraData.BlobUrl" ContentType="@_captureResult.CameraData.ContentType"></MudExFileDisplay>
                    }
                </MudPaper>
            </MudItem>
        </MudGrid>
        <div style="height: 100px;"></div>
    }

</DemoComponent>

@code {
    
    [Inject] private ICaptureService _captureService { get; set; }

    private CaptureResult? _captureResult;
    private CaptureId? _captureId;
    private Task StopRecording() => _captureService.StopCaptureAsync(_captureId);


    private void CaptureCallback(CaptureResult obj)
    {
        _captureResult = obj;
        StateHasChanged();
    }

    private async Task RecordWithOptions(CaptureOptions options)
    {
        if (options?.Valid() == true)
            _captureId = await _captureService.StartCaptureAsync(options, CaptureCallback, s => _captureId = null);
    }

    private Task RecordScreen() => RecordWithOptions(new CaptureOptions() { ScreenCapture = true });

    private Task RecordMainCamera() => RecordWithOptions(new CaptureOptions { VideoDevice = VideoDevice.Default.ToConstraints()});
    private Task RecordMainCameraLow() => RecordWithOptions(new CaptureOptions { VideoDevice = new VideoConstraints { DeviceId = VideoDevice.Default.DeviceId, AspectRatio = 1.7, Width = 10, Height = 10 } });

    private async Task Record() => await RecordWithOptions(await _captureService.EditCaptureOptionsAsync(CaptureOptionsEditMode.Full));

    private async Task RecordQuick() => await RecordWithOptions(await _captureService.EditCaptureOptionsAsync(CaptureOptionsEditMode.Simple));

}