@using MudBlazor.Extensions.Attribute;
@using MudBlazor.Extensions.Helper
@using System.Reflection;
@using Microsoft.Extensions.Localization
@using MudBlazor.Extensions.Api
@inject IStringLocalizer<HeaderForType> L
<div style="@Style" class="doc-header">
    
    @if (!DocumentationOnly)
    {
        <PageHeader Typo="@Typo">@L[(ApiMemberInfo.GetGenericFriendlyTypeName(Type) ?? Fallback)]</PageHeader>
    }

    @if (!string.IsNullOrEmpty(Documentation))
    {
        <MudAlert>@L[Documentation]</MudAlert>
    }

    @if (betaInfos?.Any() == true)
    {
        <MudAlert Severity="Severity.Warning">@($"{ApiMemberInfo.GetGenericFriendlyTypeName(Type)} - {string.Join("<br/>", betaInfos.Select(b => L[b.Message]))}")</MudAlert>
    }
    
</div>


@code {
    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (MainLayout.Instance != null)
            MainLayout.Instance.LanguageChanged += (_, _) => InvokeAsync(StateHasChanged);
    }
    public override async Task SetParametersAsync(ParameterView parameters)
    {
        if (parameters.TryGetValue<Type>(nameof(Type), out var type) && Type != type)
        {
            Documentation = await MudExResource.GetSummaryDocumentationAsync(type);
            betaInfos = type.GetCustomAttributes<BetaAttribute>()?.ToList();
        }

        await base.SetParametersAsync(parameters);

    }


    private IList<BetaAttribute> betaInfos;

    [Parameter]
    public bool DocumentationOnly { get; set; } = false;
    
    [Parameter]
    public string? Documentation { get; set; } = null;

    [Parameter]
    public string? Style { get; set; } = "";

    [Parameter]
    public Typo? Typo { get; set; } = null;
    
    [Parameter]
    public Type Type { get; set; }

    [Parameter]
    public string Fallback { get; set; }
}
