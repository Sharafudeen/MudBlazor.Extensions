@using Nextended.Core.Extensions

<div>
    <MudNavMenu>
        <MudTreeView Items="@FilteredItems()">
            <ItemTemplate>
                @{
                    var search = GetMatchedSearch(context);
                    @if (search.Found)
                    {
                        if (context.Text == "-")
                        {
                            <MudExDivider />
                        }
                        else
                        {
                            <MudTreeViewItem @bind-Expanded="@context.IsExpanded" Items="@context.Children">
                                <Content>
                                    @if (HasAction(context))
                                    {
                                        <MudNavLink Href="@context.Href" Match="@(context.Href == "/" ? NavLinkMatch.All : NavLinkMatch.Prefix)" Target="@context.Target" IconColor="@context.GetIconColor()" Icon="@context.Icon">
                                            @Content(context, false, search)
                                        </MudNavLink>
                                    }
                                    else
                                    {
                                        @if (!context.Icon.IsNullOrWhiteSpace())
                                        {
                                            <MudIcon Color="@context.GetIconColor()" Icon="@context.Icon" Class="ml-0 mr-2" />
                                        }

                                        <MudListSubheader Class="@(CanExpand(context) ? "cursor-pointer" : "")" @onclick="() => OnExpandCollapseClick(context)">
                                            @Content(context, true, search)
                                        </MudListSubheader>

                                        <div class="apply-right">
                                            <MudTreeViewItemToggleButton Visible="CanExpand(context)" Expanded="context.IsExpanded" ExpandedChanged="() => OnExpandCollapseClick(context)" />
                                        </div>
                                    }
                                </Content>
                            </MudTreeViewItem>
                        }
                    }
                }
            </ItemTemplate>
        </MudTreeView>
    </MudNavMenu>

</div>

@code {

    private RenderFragment Content(NavigationEntry context, bool withAction, (bool Found, string? Term) search)
    {
        if (!string.IsNullOrEmpty(search.Term))
        {
            return @<MudHighlighter Text="@context.Text" HighlightedText="@search.Term" />;
        }
        return @<p style="@GetStyle(context, withAction)">@context.Text</p>;

    }

    private string GetStyle(NavigationEntry context, bool withAction)
    {
        if (context.Bold == true || (!withAction && context.Demo == null && context.Parent == null) || (withAction && context.Demo == null && context.Parent == null && context.IsExpanded))
            return "font-weight: bold;";
        return "";
    }

}