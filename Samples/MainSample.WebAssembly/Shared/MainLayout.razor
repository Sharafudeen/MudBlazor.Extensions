@using MudBlazor.Extensions.Helper
@using MudBlazor.Extensions.Options
@using MudBlazor.Extensions.Core
@using BlazorJs
@using BlazorJS
@inherits LayoutComponentBase

<MudThemeProvider @bind-IsDarkMode="@IsDark" Theme="@ClientTheme.CurrentTheme" />
<MudDialogProvider />
<MudExTaskBar BorderColor="MudExColor.Warning" HideContentWhenCollapsed="true" />
<MudSnackbarProvider />

<MudOverlay @bind-Visible="IsOverlayVisible" DarkBackground="true" AutoClose="true">
    <MudProgressCircular Color="Color.Secondary" Indeterminate="true" />
</MudOverlay>

<MudLayout>

    <MudAppBar Elevation="0">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <LogoTitle Hidden="@_drawerOpen" />

        <MudSpacer />
        
        <MudExIconButton ToolTip="Activate comments" Visible="@(!_commentsAvailable)" Icon="@Icons.Material.Filled.Comment" Color="Color.Warning" OnClick="@(() => _commentsAvailable = true)" />
        <MudExIconButton ToolTip="Try MudEx online" Target="_blank" Link="@AppConstants.Urls.GetTryOnline(IsDark)" Icon="@Icons.Material.Rounded.PlayArrow" Color="@(IsDark ? Color.Success : Color.Inherit)" />
        
        <MudExDivider Size="2" Vertical="true" />

        <MudTooltip Text="Change or edit theme" Arrow="true" Placement="Placement.Bottom">
            <ThemeEdit OnThemeChanged="@HandleThemeChange" @bind-IsDark="@IsDark" @bind-IsBusy="@IsOverlayVisible" />
        </MudTooltip>

        <MudExDivider Size="2" Vertical="true" />

        <MudHidden Breakpoint="Breakpoint.SmAndDown">
            <MudExIconButton ToolTip="Official MudBlazor website" Icon="@Icons.Custom.Brands.MudBlazor" Color="Color.Inherit" Link="https://www.mudblazor.com" Target="_blank" />
            <MudExIconButton ToolTip="Nuget Package source" Icon="@MudExIcons.Custom.Brands.Nuget" Color="Color.Inherit" Link="https://www.nuget.org/packages/MudBlazor.Extensions" Target="_blank" />
            <MudExIconButton ToolTip="GitHub Project repository" Icon="@Icons.Custom.Brands.GitHub" Color="Color.Inherit" Link="https://github.com/fgilde/MudBlazor.Extensions" Target="_blank" />
            <MudExIconButton ToolTip="Info & About" Icon="@Icons.Material.Outlined.Info" Size="Size.Small" Color="Color.Inherit" OnClick="ShowAbout" />
        </MudHidden>
        <MudHidden Breakpoint="Breakpoint.SmAndDown" Invert="true">
            <MudMenu Dense="true" AnchorOrigin="Origin.BottomRight" Icon="@Icons.Material.Filled.MoreVert">
                <MudMenuItem Icon="@Icons.Custom.Brands.MudBlazor" Link="https://www.mudblazor.com" Target="_blank">Official MudBlazor website</MudMenuItem>
                <MudMenuItem Icon="@Icons.Custom.Brands.Microsoft" Link="https://www.nuget.org/packages/MudBlazor.Extensions" Target="_blank">Nuget</MudMenuItem>
                <MudMenuItem Icon="@Icons.Custom.Brands.GitHub" Link="https://github.com/fgilde/MudBlazor.Extensions" Target="_blank">GitHub</MudMenuItem>
                <MudExDivider Color="Color.Primary" />
                <MudMenuItem Icon="@Icons.Material.Outlined.Info" Size="Size.Small" Color="Color.Inherit" OnClick="ShowAbout">Info</MudMenuItem>
            </MudMenu>
        </MudHidden>
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" Elevation="1">
        @if (ClientTheme.CurrentTheme.ShowLogoInDrawer)
        {
            <MudDrawerHeader>
                <LogoTitle />
            </MudDrawerHeader>
        }
        <NavMenu />
    </MudDrawer>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Class="my-sample-main-content-container my-4 pt-4">
            @Body
        </MudContainer>
    </MudMainContent>
    @if (_test)
    {
        <CommentsFooter @bind-Available="_commentsAvailable"/>
    }

</MudLayout>

@code {
    public static MainLayout? Instance { get; private set; }
    bool _drawerOpen = true;
    bool _commentsAvailable = true;
    bool _test;
    public bool IsOverlayVisible { get; set; }
    public bool IsDark { get; set; } = true;
    public event EventHandler<ThemeChangedEventArgs> ThemeChanged;

    private async void ShowAbout()
    {
        var op = new DialogOptionsEx
            {
                DragMode = MudDialogDragMode.Simple,
                CloseButton = true,
                MaxWidth = MaxWidth.ExtraSmall,
                FullWidth = true,
                FullHeight = true,
                DisablePositionMargin = true,
                DisableSizeMarginY = true,
                Animation = AnimationType.SlideIn,
                Position = DialogPosition.CenterRight,
                DialogAppearance = MudExAppearance.FromCss(MudExCss.Classes.Dialog.ColorfullGlass),
                DialogBackgroundAppearance = MudExAppearance.FromCss(MudExCss.Classes.Backgrounds.MovingDots)
            };


        await DialogService.ShowEx<InfoDialog>("Info", op);
    }

    protected override async Task OnInitializedAsync()
    {
        Instance = this;
        _test = await JsRuntime.DInvokeAsync<bool>(w => !!w.localStorage["TEST"]);
        await base.OnInitializedAsync();
    }



    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    internal static CodeBlockTheme GetCodeBlockTheme() => Instance is { IsDark: true } ? CodeBlockTheme.AtomOneDark : CodeBlockTheme.AtomOneLight;

    private async void HandleThemeChange(bool arg1, ClientTheme arg2)
    {
        ThemeChanged?.Invoke(this, new ThemeChangedEventArgs { IsDark = arg1, Theme = arg2 });
    }

    public class ThemeChangedEventArgs
    {
        public bool IsDark { get; set; }
        public ClientTheme Theme { get; set; }
    }

    public void SetTheme(ClientTheme theme)
    {
        ClientTheme.CurrentTheme = theme;
        StateHasChanged();
        HandleThemeChange(IsDark, theme);
    }

}