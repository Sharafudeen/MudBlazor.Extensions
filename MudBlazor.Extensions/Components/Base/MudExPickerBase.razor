@inherits MudPicker<T>
@typeparam T
@implements IMudExComponent
@using MudBlazor.Extensions.Core


@Render

@code
{
    protected override RenderFragment InputContent =>
            // note: Mask needs to remain before Text!
            @<MudTextField 
                 T="string" 
                 @ref="_inputReference" 
                 @attributes="UserAttributes" 
                 Style="@Style"
                 Label="@Label" 
                 Mask="@_mask"
                 @bind-Value="@Text"
                 Immediate="@(ImmediateText && Editable)"
                 Placeholder="@Placeholder"
                 HelperText="@HelperText" 
                 HelperTextOnFocus="@HelperTextOnFocus" 
                 Variant="@Variant" 
                 ReadOnly="@(!Editable || GetReadOnlyState())" 
                 Disabled="@GetDisabledState()"
                 Underline="@Underline"
                  OnAdornmentClick="ToggleStateExtAsync"
                  Adornment="@Adornment"
                 AdornmentIcon="@AdornmentIcon" 
                 AdornmentColor="@AdornmentColor" 
                 AdornmentAriaLabel="@AdornmentAriaLabel"
                 IconSize="@IconSize" 
                 Margin="@Margin" 
                 Required="@Required" 
                 RequiredError="@RequiredError" 
                 Error="@Error" 
                 ErrorText="@ErrorText"
                 Clearable="@(!GetReadOnlyState() && Clearable)"
                 OnClearButtonClick="@(async () => await ClearAsync())"
                 @onclick="OnClickAsync" />;

    protected override RenderFragment Render =>
    @<CascadingValue Value="@this" IsFixed="true">
        <div class="@PickerClassname" id="@Id">
            @if (PickerVariant != PickerVariant.Static)
        {
            <CascadingValue Name="SubscribeToParentForm" Value="false" IsFixed="true">
                @if(InputContent != null) {
                @InputContent
            }
            </CascadingValue>
        }
            @if (PickerVariant == PickerVariant.Inline)
        {
            <MudExPopover Style="@GetPopOverStyle()" Animation="@InlineAnimation" Open="@Open" Fixed="true" AnchorOrigin="@(AnchorOrigin)" TransformOrigin="@(TransformOrigin)" OverflowBehavior="@(OverflowBehavior)" Paper="false">
                <div @ref="_pickerInlineRef" class="@PickerInlineClassname">
                    <MudPaper @attributes="UserAttributes" Class="@PickerPaperClassname" Style="@PickerPaperStylename" Elevation="@Elevation" Square="@(!Rounded)">
                        <div class="@PickerContainerClassname">
                            @if(PickerContent != null){
                            @PickerContent
                        }
                        </div>
                        @if (PickerActions != null)
                    {
                        <div class="@ActionsClassname">
                            @PickerActions(this)
                        </div>
                    }
                    </MudPaper>
                </div>
            </MudExPopover>
        }
        else if (PickerVariant == PickerVariant.Static)
        {
            <MudPaper @attributes="UserAttributes" Class="@PickerPaperClassname" Style="@PickerPaperStylename" Elevation="@Elevation" Square="@(!Rounded)">
                <div class="@PickerContainerClassname">
                    @if(PickerContent != null){
                    @PickerContent
                }
                </div>
                @if (PickerActions != null)
            {
                <div class="@ActionsClassname">
                    @PickerActions(this)
                </div>
            }
            </MudPaper>
        }
        else if(PickerVariant == PickerVariant.Dialog)
        {
            <MudExDialog @bind-Visible="Open" OptionsEx="DialogOptions">
                <TitleContent>
                    <MudText Typo="Typo.subtitle2">
                        <div style="display: flex">
                            <MudIcon Icon="@AdornmentIcon" Class="mr-3"/>
                            <p>@TryLocalize(Text)</p>
                        </div>
                    </MudText>
                </TitleContent>
                <DialogContent>
                    <MudPaper @attributes="UserAttributes" Elevation="0" Square="@(!Rounded)">
                        <div class="@PickerContainerClassname">
                            @if(PickerContent != null){
                                @PickerContent
                            }
                        </div>
                        @if (PickerActions != null)
                        {
                            <div class="@ActionsClassname">
                                @PickerActions(this)
                            </div>
                        }
                    </MudPaper>
                </DialogContent>
                <DialogActions>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="CloseOverlayAsync" Class="px-10">@TryLocalize("Close")</MudButton>
                </DialogActions>
            </MudExDialog>
        }
        </div>
        @if (PickerVariant == PickerVariant.Inline)
    {
        <MudOverlay Visible="@Open" OnClick="CloseOverlayAsync" LockScroll="false" />
    }
    </CascadingValue>;
}
