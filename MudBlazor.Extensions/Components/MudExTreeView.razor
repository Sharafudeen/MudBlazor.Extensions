@typeparam T
@* @inherits MudTreeView<T> *@
@inherits MudExBaseComponent<MudExTreeView<T>>
@using MudBlazor.Extensions.Core
@implements MudBlazor.Extensions.Core.IMudExComponent

<style>
    .horizontal-tree-wrapper {
        height: 100%;
    }

    .horizontal-tree {
        overflow: hidden;
        background-color: #ffe8e1;
        height: 100%;
        padding: 0;
    }

    .horizontal-tree-scroll-wrapper {
        display: flex;
        place-items: center;
        height: 100%;
        transition-property: transform;
        transition-duration: 0.5s;
    }

    .horizontal-tree-column:not(:first-child) .horizontal-tree-node:before, .horizontal-tree-column .horizontal-tree-node.node-selected.node-expandable:after, .horizontal-tree-column:not(:first-child) .horizontal-tree-node:not(:last-child) > div:after {
        content: " ";
        background-color: green;
        position: absolute;
        top: 50%;
        height: 2px;
        width: 24px;
    }

    .horizontal-tree-column:not(:first-child) .horizontal-tree-node:before {
        left: 0;
    }

    .horizontal-tree-column .horizontal-tree-node.node-selected.node-expandable:after {
        right: 0;
    }

    .horizontal-tree-column:not(:first-child) .horizontal-tree-node:not(:last-child) > div:after {
        width: 2px;
        height: 100%;
        left: calc($tree-node-padding * -1 - $tree-node-line-width);
        padding-top: calc($tree-node-line-width + 2px);
    }

    .horizontal-tree-node {
        padding: 0 24px;
        cursor: pointer;
        width: 250px;
    }

        .horizontal-tree-node > div {
            position: relative;
            padding: 4px 36px 4px 12px;
            height: 25px;
            white-space: nowrap;
            border: 1px solid transparent;
            display: flex;
            align-items: center;
        }

        .horizontal-tree-node.node-selected > div {
            background-color: #f00;
            border-color: darkgray;
            border-radius: 8px;
        }

        .horizontal-tree-node .horizontal-tree-expandable {
            position: absolute;
            top: 8px;
            right: 8px;
        }

    .clickable {
        cursor: pointer;
    }

    .sw-knowledge-breadcrumb {
        display: inline;
    }

        .sw-knowledge-breadcrumb mat-icon {
            vertical-align: middle;
        }

        .sw-knowledge-breadcrumb .mat-button {
            padding: 0;
            min-width: 0;
        }

    .chevron-right-button {
        width: 22px;
        min-width: 20px;
    }

    .clickable:focus {
        outline: none;
    }

        .clickable:focus:not(.node-selected) {
            color: var(--sw-orange-light, orange);
            opacity: 0.5;
        }

    .node-selected {
        color: var(--sw-orange-light, orange);
        opacity: 1;
    }

    .sw-knowledge-tree-invisible {
        display: none;
    }

    .sw-knowledge-tree ul, .sw-knowledge-tree li {
        margin-top: 0;
        margin-bottom: 0;
        list-style-type: none;
    }

    .sw-knowledge-sidenav-text {
        padding-right: 20px;
        padding-left: 20px;
        max-width: 360px;
        word-wrap: normal;
    }

    .sw-knowledge-sidenav-icons {
        position: absolute;
        left: 5px;
    }

    .sw-knowledge-breadcrumb-menu-arrow {
        position: absolute;
        margin-left: 4px;
        width: 14px;
        top: 12px;
        right: 0px;
    }

    .sw-knowledge-sidenav-arrow {
        position: absolute;
        right: 5px;
    }

    .sw-knowledge-card-node-folder:hover:after {
        content: '\f07c';
    }

    .sw-knowledge-card-node-folder:after {
        content: '\f07b';
    }

    .sw-knowledge-card-node-text:after {
        content: '\f15c';
    }

    ::ng-deep .mat-menu-panel:first-child {
        max-width: 100% !important;
    }

    .sw-knowledge-card-node-back {
        background-color: var(--sw-orange-light, orange);
    }

        .sw-knowledge-card-node-back:after {
            content: '\f0e2';
        }

        .sw-knowledge-card-node-back span {
            color: whitesmoke;
            font-style: italic;
        }

            .sw-knowledge-card-node-back span:before {
                content: '\f04a';
                cursor: pointer;
                transition: 0.8s;
                font-family: 'FontAwesome';
                margin-right: 8px;
                font-size: 16px;
            }

    .sw-knowledge-card-info {
        height: 0px !important;
    }

    .sw-knowledge-card * {
        transition: all 0.3s ease;
    }

    .sw-knowledge-card-title-node-selected {
        box-shadow: -9px 10px 35px 0px rgba(0, 0, 0, 0.75);
        background: whitesmoke;
        color: var(--sw-orange-500, darkorange);
        padding: 5px;
        width: 70%;
        text-align: center;
    }

    .sw-knowledge-card:after, .sw-knowledge-card-node-folder-bordered:after, .sw-knowledge-card-node-text-bordered:after {
        opacity: 0.2;
        position: absolute;
        text-align: center;
        width: 100%;
        transition: 0.3s;
        font-family: 'FontAwesome';
        font-size: 96px;
        top: 48px;
    }

    .sw-knowledge-card-node-folder-bordered, .sw-knowledge-card-node-text-bordered {
        border-radius: 5px;
        box-shadow: 0 2px 1px -1px rgba(0, 0, 0, 0.2), 0 1px 1px 0 rgba(0, 0, 0, 0.14), 0 1px 3px 0 rgba(0, 0, 0, 0.12);
    }

        .sw-knowledge-card-node-folder-bordered ::ng-deep .mat-figure, .sw-knowledge-card-node-text-bordered ::ng-deep .mat-figure {
            justify-content: start !important;
            padding-left: 10px !important;
        }

    .card-line {
        padding-left: 15px;
        border-left: 3px solid var(--sw-orange-light, orange);
        height: 50%;
        display: flex;
        align-items: center;
    }

    .sw-knowledge-card:hover:after {
        transform: scale(2.3);
    }

    .sw-knowledge-card:hover span {
        font-size: 15pt;
    }

    .sw-knowledge-card:hover .sw-knowledge-card-info {
        height: 20px !important;
    }

</style>

<MudExTagField Immediate="true"
               ChipColor="MudExColor.Primary"
               @bind-Values="Filters" @bind-Value="Filter" Placeholder="Filter (Press enter to tag)" T="string"></MudExTagField>
               @if (selectedNode != null){
<p>@(string.Join("/", selectedNode?.Path?.Select(n => TextFunc(n))))</p>
<p>@(selectedNode.GetPathString(TextFunc))</p>
<p>@(selectedNode.Parent?.ToString())</p>
               }

@if (ViewMode == TreeViewMode.Default)
{
    @Default()
}
else if (ViewMode == TreeViewMode.Horizontal)
{
    @Horizontal()
}


@code {
    private RenderFragment Horizontal()
    {
        return @<div @onwheel="OnWheel" tabindex="0" class="horizontal-tree-wrapper">
        <div class="horizontal-tree">
            <div class="horizontal-tree-scroll-wrapper">
                @foreach (var node in Path())
            {
                <div class="horizontal-tree-column">
                    @NodeColumn(node)
                </div>
            }
            </div>
        </div>
    </div>
        ;
    }

    private RenderFragment NodeColumn(T node)
    {
        return @<div class="@GetNodeClass(node)">
        @foreach (var child in node?.Children ?? Enumerable.Empty<T>())
    {
        <div class="horizontal-tree-node" style="@GetTransformStyle(child)" @onclick="() => NodeClick(child)">
            <span>@child.ToString()</span>
            @if (child.HasChildren)
        {
            <span class="horizontal-tree-expandable"></span>
        }
        </div>
    }
    </div>;
    }

    private RenderFragment Default()
    {
        return @<MudTreeView Color="Color.Primary" Hover="true" Items="@FilteredItems()">
                    <ItemTemplate>
                    @{
                        var search = GetMatchedSearch(context);
                        @if (search.Found)
                        {
                                <MudTreeViewItem Expanded="@IsExpanded(context)"
                                                 Style="@("cursor: pointer;")"
                                                 OnClick="@(() => NodeClick(context))"
                                                 Text="@TextFunc(context)"
                                                 Icon="@Icons.Material.Filled.Label"
                                                 Items="@(context?.Children?.ToHashSet())">
                                    <Content>
                                        @ItemRender(new TreeViewItemContext<T>(context, IsSelected(context), IsExpanded(context)))
                                    </Content>
                                </MudTreeViewItem>
                        }
                    }
                    </ItemTemplate>
        </MudTreeView>;
    }

    private RenderFragment ItemRender(TreeViewItemContext<T> context)
    {
        if (ItemTemplate != null)
            return ItemTemplate(context);
        return
    @<Empty>
        <MudTreeViewItemToggleButton ExpandedChanged="@(expanded => SetExpanded(context.Item, expanded))" Expanded="@context.IsExpanded" Visible="@(context.Item?.Children?.Any() == true)" />
        <MudText Style="@($"color: {(context.IsSelected ? MudExColor.Secondary.ToCssStringValue() : "inherit")};")">@TextFunc(context.Item)</MudText>
    </Empty>;
    }
}
