@typeparam T
@inherits MudExTreeViewList<T>
@namespace MudBlazor.Extensions.Components

@using Nextended.Core.Extensions

@RenderSearchBar()

@{
    _nodeInfo = LevelNodes();
}

@RenderNavigationNodes(_nodeInfo, "justify-center")


<MudExCardList LightBulbSize="@LightBulbSize" LightBulbSizeUnit="@LightBulbSizeUnit"
               Virtualize="@Virtualize"
               TData="(string Term, T Item)"
               ItemsSource="@GetFilteredItems(_nodeInfo.Nodes)"
               ItemTemplate="@ItemTpl"
               HoverColor="@HoverColor" HoverMode="@HoverMode" BackgroundColor="@BackgroundColor"
               Spacing="@Spacing" Justify="@Justify"
               Class="@Class" Style="@AnimationStyleStr()">


</MudExCardList>


@code {
    (bool IsRoot, IReadOnlyCollection<T> Nodes) _nodeInfo;

    private RenderFragment ItemTpl((string Term, T Item) value)
    {
        return ItemRender(value.Item, value.Term);
    }

    private RenderFragment ItemRender(T item, string search = "")
    {
        var context = CreateContext(item, search);
        if (ItemTemplate != null)
            return ItemTemplate(context);

        return IsSeparator(item) ? RenderSeparator() : RenderItem(context);
    }


    public override RenderFragment RenderItem(TreeViewItemContext<T> context)
    {
        return @<MudCard Class="@ItemClassStr(context)" Style="@ItemStyleStr(context)" @onclick="@(() => { NodeClick(context.Value); })">
            <MudCardHeader>
                <CardHeaderContent>
                    @RenderItemContent(context, true, false)
                </CardHeaderContent>
                <CardHeaderActions>

                </CardHeaderActions>
            </MudCardHeader>
            <MudCardContent>
                @RenderItemContent(context, true, true)
            </MudCardContent>
        </MudCard>;
    }

}