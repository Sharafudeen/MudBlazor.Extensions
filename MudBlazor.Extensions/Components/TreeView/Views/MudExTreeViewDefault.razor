@typeparam T
@using MudBlazor.Extensions.Components.ObjectEdit
@inherits MudExTreeViewBase<T>
@namespace MudBlazor.Extensions.Components

@RenderSearchBar()
<MudTreeView Color="Color.Primary" Hover="true" Items="@FilterManager.FilteredItems()" Dense="@Dense">
    <ItemTemplate>
        @{
            var search = FilterManager.GetMatchedSearch(context);
            @if (search.Found)
            {
                @ItemRender(context, TreeViewMode.Default, search.Term)
            }
        }
    </ItemTemplate>
</MudTreeView>

@code {

    private RenderFragment ItemRender(T item, TreeViewMode viewMode, string search = "")
    {
        var context = CreateContext(item, search);
        if (ItemTemplate != null)
            return ItemTemplate(context);

        return IsSeparator(item) ? RenderSeparator() : RenderItem(context);
    }

    public virtual RenderFragment RenderItem(TreeViewItemContext<T> context)
    {
        return
            @<MudTreeViewItem Expanded="@context.IsExpanded"
                                  OnClick="@(() => NodeClick(context.Item))"
                                  Items="@(context.Item?.Children?.ToHashSet())">
            <Content>
                <div style="@ItemStyleStr(context)" class="@ItemClassStr(context)">
                    <MudTreeViewItemToggleButton ExpandedIcon="@ExpandedIcon" ExpandedChanged="@(expanded => SetExpanded(context.Item, expanded))" Expanded="@context.IsExpanded" Visible="@(context.Item?.Children?.Any() == true)"/>
                    @RenderItemContent(context)
                </div>
            </Content>
        </MudTreeViewItem>;
    }
}
