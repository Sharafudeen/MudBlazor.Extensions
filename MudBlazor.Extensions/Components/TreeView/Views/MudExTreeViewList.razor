@typeparam T
@inherits MudExTreeViewFlatList<T>
@namespace MudBlazor.Extensions.Components

@using Nextended.Core.Types

@RenderSearchBar()
@{
    var nodeRenderInfo = LevelNodes();
}

@RenderNavigationNodes(nodeRenderInfo)

<MudList T="T" Class="@Class" Style="@AnimationStyleStr()" Dense="@Dense">
    <MudExVirtualize IsEnabled="@Virtualize" Items="@GetFilteredItems(nodeRenderInfo.Nodes)">
        @ItemRender(context.Item, context.Term)
    </MudExVirtualize>
</MudList>

@code {

    protected virtual RenderFragment RenderNavigationNodes((bool IsRoot, IReadOnlyCollection<T> Nodes) levelNodes = default, string additionalCls = "")
    {
        if(levelNodes == default)
            levelNodes = LevelNodes();
        return @<RenderChild Condition="@((RenderBackLink || RenderHomeLink) && (LastSelectedNode != null && !levelNodes.IsRoot))">
                   <MudToolBar Class="@($"{NavigationLinkBarClass} {additionalCls}")" Style="@NavigationLinkBarStyle" Dense="true" WrapContent="true">
                       @if (RenderHomeLink && LastSelectedNode != null && (GetBackNodeTarget().Context.Value != null || !RenderBackLink) && !levelNodes.IsRoot)
                       {
                           @RenderRootNode()
                       }
                       @if (RenderBackLink)
                       {
                           @RenderBackNode("margin-left: 10px")
                       }
                   </MudToolBar>
                   <MudExDivider/>
               </RenderChild>;
    }

    protected virtual RenderFragment RenderRootNode(string style = "")
    {
        return RenderActionNode((TryLocalize(RootName), CreateContext(default)), Icons.Material.Filled.Home, style);
    }

    protected virtual RenderFragment RenderBackNode(string style = "")
    {
        return RenderActionNode(GetBackNodeTarget(), Icons.Material.Filled.ArrowBack, style);
    }

    protected virtual RenderFragment RenderActionNode((string Label, TreeViewItemContext<T> Context) targetNode, string icon, string style = "")
    {
        return @<RenderChild>
                   <MudButton Style="@style" OnClick="@(() => { _animationIn = true; NodeClick(targetNode.Context.Value); })" StartIcon="@icon">
                        @targetNode.Label
                   </MudButton>
            
        </RenderChild>;
    }
 
    private RenderFragment ItemRender(T item, string search = "")
    {
        var context = CreateContext(item, search);
        if (ItemTemplate != null)
            return ItemTemplate(context);

        return IsSeparator(item) ? RenderSeparator() : RenderItem(context);
    }

    public override RenderFragment RenderItem(TreeViewItemContext<T> context)
    {
        return
        @<MudListItem T="T" Style="@ItemStyleStr(context)" Value="@context.Value" Class="@ItemClassStr(context)" OnClick="@(() => NodeClick(context.Value))">
            <div class="@ListItemClassStr()">
                @RenderItemContent(context, true, false)
                @if(context.Value.HasChildren())
                {
                    <MudExIcon Icon="@ExpandedIcon" />
                }
            </div>
            @RenderPath(context)
        </MudListItem>;
    }
}
