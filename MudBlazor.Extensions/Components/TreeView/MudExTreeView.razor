@typeparam T
@inherits MudExBaseComponent<MudExTreeView<T>>
@namespace MudBlazor.Extensions.Components
@using MudBlazor.Extensions.Core
@using Nextended.Core.Extensions
@using Nextended.Core.Types

<style>
    .horizontal-tree-wrapper {
        height: 100%;
    }

    .horizontal-tree {
        overflow: hidden;
        background-color: #ffe8e1;
        height: 100%;
        padding: 0;
    }

    .horizontal-tree-scroll-wrapper {
        display: flex;
        place-items: center;
        height: 100%;
        transition-property: transform;
        transition-duration: 0.5s;
    }

    .horizontal-tree-column:not(:first-child) .horizontal-tree-node:before, .horizontal-tree-column .horizontal-tree-node.node-selected.node-expandable:after, .horizontal-tree-column:not(:first-child) .horizontal-tree-node:not(:last-child) > div:after {
        content: " ";
        background-color: green;
        position: absolute;
        top: 50%;
        height: 2px;
        width: 24px;
    }

    .horizontal-tree-column:not(:first-child) .horizontal-tree-node:before {
        left: 0;
    }

    .horizontal-tree-column .horizontal-tree-node.node-selected.node-expandable:after {
        right: 0;
    }

    .horizontal-tree-column:not(:first-child) .horizontal-tree-node:not(:last-child) > div:after {
        width: 2px;
        height: 100%;
        left: calc($tree-node-padding * -1 - $tree-node-line-width);
        padding-top: calc($tree-node-line-width + 2px);
    }

    .horizontal-tree-node {
        padding: 0 24px;
        cursor: pointer;
        width: 250px;
    }

        .horizontal-tree-node > div {
            position: relative;
            padding: 4px 36px 4px 12px;
            height: 25px;
            white-space: nowrap;
            border: 1px solid transparent;
            display: flex;
            align-items: center;
        }

        .horizontal-tree-node.node-selected > div {
            background-color: #f00;
            border-color: darkgray;
            border-radius: 8px;
        }

        .horizontal-tree-node .horizontal-tree-expandable {
            position: absolute;
            top: 8px;
            right: 8px;
        }

</style>


<RenderChild Condition="@(ViewMode == TreeViewMode.Default)">
    <MudExTagField Immediate="true"
                   ChipColor="MudExColor.Primary"
                   @bind-Values="Filters" @bind-Value="Filter" T="string"></MudExTagField>
    <MudTreeView Color="Color.Primary" Hover="true" Items="@FilteredItems()" Dense="@Dense">
        <ItemTemplate>
            @{
                var search = GetMatchedSearch(context);
                @if (search.Found)
                {
                    @ItemRender(context, search.Term)                           
                }
            }
        </ItemTemplate>
    </MudTreeView>
</RenderChild>

<RenderChild Condition="@(ViewMode == TreeViewMode.Breadcrumb)">
    <MudToolBar Dense="@Dense" WrapContent="true">
        @MenuFor(FilteredItems())
        @foreach (var item in Path())
        {
            <p>@ItemRender(item)</p>
            @MenuFor(item.Children)
        }
        <MudSpacer />
        <MudExToggleableSearch MultiSearch="true" @bind-Filters="Filters" @bind-Filter="Filter"></MudExToggleableSearch>
    </MudToolBar>
</RenderChild>

<RenderChild Condition="@(ViewMode == TreeViewMode.List)">
    <MudList Dense="@Dense" Clickable="true">
        @{
            var root = false;
            HashSet<T> nodes = (selectedNode != null ? (selectedNode.Children?.Any() == true ? selectedNode.Children : selectedNode?.Parent?.Children) : null);
            if (nodes == null)
            {
                nodes = FilteredItems();
                root = true;
            }
        }
        @if (selectedNode != null && !root)
        {
            <MudListItem OnClick="@(() => NodeClick(selectedNode.Children?.Any() == true ? selectedNode.Parent : selectedNode.Parent.Parent))" Text="@TryLocalize("Back")" Icon="@Icons.Material.Filled.ArrowBack" />
            <MudDivider />
        }
        @foreach (var item in nodes)
        {
            @ItemRender(item)
        }
    </MudList>
</RenderChild>

<RenderChild Condition="@(ViewMode == TreeViewMode.Horizontal)">    
    <div @onwheel="OnWheel" tabindex="0" class="horizontal-tree-wrapper">
        <div class="horizontal-tree">
            <div class="horizontal-tree-scroll-wrapper">
                @* @NodeColumn(FilteredItems(), "horizontal-tree-node") *@
                @foreach (var node in Path())
                {
                    @NodeColumn(node)
                }
            </div>
        </div>
    </div>
</RenderChild>



@code {

    private RenderFragment NodeColumn(T node)
    {
        return NodeColumn(node?.Children, GetNodeClass(node));
    }

    private RenderFragment NodeColumn(IEnumerable<T> nodes, string cls)
    {
        return @<div class="horizontal-tree-column">
        @foreach (var child in nodes ?? Enumerable.Empty<T>())
    {
        <div class="@cls" style="@GetTransformStyle(child)" @onclick="() => NodeClick(child)">
            <div id="@($"node-")">
                <span>@child.ToString()</span>
                @if (child.Children?.Any() == true)
            {
                <span class="horizontal-tree-expandable fa fas fa-chevron-right"></span>
            }
            </div>
        </div>
    }
    </div>
        ;
    }

    private RenderFragment MenuFor(IEnumerable<T> items)
    {
        var hierarchicals = items as T[] ?? items?.ToArray();
        return
        @<RenderChild>
            @if (hierarchicals?.Any(i => GetMatchedSearch(i).Found) == true)
        {
            <MudMenu Dense="@Dense" Icon="@ExpandedIcon">
                @foreach (var child in hierarchicals)
                {
                    var search = GetMatchedSearch(child);
                    @if(search.Found) {
                        @ItemRender(child, search.Term, true)
                    }
                }

            </MudMenu>
        }
        </RenderChild>;
    }

    public virtual RenderFragment RenderSeparator() => @<MudExDivider />;

    private RenderFragment ItemRender(T item, string search = "", bool asMenuItem = false)
    {
        var context = new TreeViewItemContext<T>(item, IsSelected(item), IsExpanded(item), search, asMenuItem, this);
        if (ItemTemplate != null)
            return ItemTemplate(context);

        return IsSeparator(item) ? RenderSeparator() : RenderItem(context);
    }

    public virtual RenderFragment RenderItem(TreeViewItemContext<T> context)
    {
        return
            @<RenderChild>
                @if(ViewMode == TreeViewMode.Default) {
                    <MudTreeViewItem Expanded="@IsExpanded(context.Item)"
                                     Style="@("cursor: pointer;")"
                                     OnClick="@(() => NodeClick(context.Item))"
                                     Items="@(context.Item?.Children?.ToHashSet())">
                        <Content>
                            <MudTreeViewItemToggleButton ExpandedIcon="@ExpandedIcon" ExpandedChanged="@(expanded => SetExpanded(context.Item, expanded))" Expanded="@context.IsExpanded" Visible="@(context.Item?.Children?.Any() == true)" />    
                            @RenderItemContent(context)
                        </Content>
                    </MudTreeViewItem>   
                } else if(ViewMode == TreeViewMode.List) {
                    <MudListItem OnClick="@(() => NodeClick(context.Item))">
                        <div style="display: flex; justify-content: space-between;">
                        <div>
                            @RenderItemContent(context)
                        </div>
                        @if(context.Item.HasChildren()){
                            <div>
                                <MudExIcon Icon="@ExpandedIcon" />
                            </div>
                        }
                        </div>
                    </MudListItem>

                } else if(ViewMode == TreeViewMode.Breadcrumb && context.RenderedAsMenuItem) {
                    <MudMenuItem OnClick="@(() => NodeClick(context.Item))">
                        @RenderItemContent(context)
                    </MudMenuItem>
                }
                else{
                    @RenderItemContent(context)
                }
            </RenderChild>;
    }

    public virtual RenderFragment RenderItemContent(TreeViewItemContext<T> context)
    {
        if (ItemContentTemplate != null)
            return ItemContentTemplate(context);
        return
        @<MudText Style="@($"color: {(context.IsSelected ? MudExColor.Secondary.ToCssStringValue() : "inherit")};")">@TextFunc(context.Item)</MudText>;
    }

}
